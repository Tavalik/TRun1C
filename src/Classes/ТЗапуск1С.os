// *****************************************************************
// Библиотека: TRun1C
// Автор: Онянов Виталий (Tavalik.ru)
// Версия от 19.09.2023
//

// BSLLS:IfElseIfEndsWithElse-off
// BSLLS:NumberOfOptionalParams-off
// BSLLS:NumberOfParams-off
// BSLLS:ExportVariables-off

#Использовать 1commands

// *****************************************************************
// ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ

// Структура параметров запуска, описание в процедуре ИнициироватьПараметры()
Перем ПараметрыЗапуска Экспорт;
// Переменная для возврата ошибки, если таковая имела место быть
Перем ТекстОшибки Экспорт;
// Переменная, отвечающая за вывод запускаемых команд
Перем РежимОтладки Экспорт;


// *****************************************************************
// ЛОКАЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// *****************************************************************
Процедура ИнициироватьПараметры()
   
	ПараметрыЗапуска = Новый Структура;
	
	// Путь к платформе 1С, 
	// Пример:
	//	C:\Program Files (x86)\1cv8\8.3.8.2054\bin\1cv8.exe
	ПараметрыЗапуска.Вставить("ПутьКПлатформе1С", "");

	// Параметры запуска платформы 1С 
	// Пример:
	//	/VLen /Len
	ПараметрыЗапуска.Вставить("ПараметрыЗапускаПлатформы1С", "");
	
	// Версия Платформы 1С (Если не заполнена, вычисляется автоматически)
	// Пример:
	//	81
	//	82
	//	83
	ПараметрыЗапуска.Вставить("ВерсияПлатформы", "");
	
	// Тип базы 1С
	// Варианты:
	//	F - файловая 
	//  S - серверная
	//  WS - веб
	ПараметрыЗапуска.Вставить("ТипБазы", "S");
	
	// Имя базы 1С
	// Указывается как для файловой, так и для серверной базы:
	ПараметрыЗапуска.Вставить("ИмяБазы", "");

	// Параметры сервера 1С
	// Указывается только для серверной базы
	ПараметрыЗапуска.Вставить("АдресКластера", "localhost");
	ПараметрыЗапуска.Вставить("ПортКластера", "1541");
	ПараметрыЗапуска.Вставить("ПортАгента", "1540");
	ПараметрыЗапуска.Вставить("ИмяПользователяАдминистратораКластера", "");
	ПараметрыЗапуска.Вставить("ПарольПользователяАдминистратораКластера", "");
	ПараметрыЗапуска.Вставить("КодРазрешения", "987654321");
	ПараметрыЗапуска.Вставить("СообщениеПриБлокировке", "Информационная база заблокирована для обслуживания.");
	ПараметрыЗапуска.Вставить("АдресСервераАдминистрирования", "");

	// При указании имени файла, результат работы конфигуратора в пакетном режиме будет записан в данные файл файл
	ПараметрыЗапуска.Вставить("КоличествоПопытокПодключенияККластеру", 3);
	
	// Параметры авторизации в информационной базе
	ПараметрыЗапуска.Вставить("ИмяПользователя", "");
	ПараметрыЗапуска.Вставить("ПарольПользователя", "");
	
	// Параметры работы с хранилищем
	ПараметрыЗапуска.Вставить("АдресХранилища", "");
	ПараметрыЗапуска.Вставить("ИмяПользователяХранилища", "");
	ПараметрыЗапуска.Вставить("ПарольПользователяХранилища", "");
	
	// При установке данного флага, все дейстия в пакетном запуске конфигуратора будут видны пользователю
	ПараметрыЗапуска.Вставить("ВидныДействияВПакетномРежиме", Ложь);
	// При указании имени файла, результат работы конфигуратора в пакетном режиме будет записан в данные файл файл
	ПараметрыЗапуска.Вставить("ФайлДляЗаписиРезультатовРаботыВПакетномРежиме", "");

	// Текст ошибки
	ТекстОшибки = "";
	РежимОтладки = Ложь;

КонецПроцедуры

// *****************************************************************
Функция ПолучитьВерсиюПлатформы()

	Если СтрНайти(ПараметрыЗапуска.ПутьКПлатформе1С, "\1cv8\8.3.") > 0 Тогда
		Возврат "83";
	КонецЕсли;

	Если СтрНайти(ПараметрыЗапуска.ПутьКПлатформе1С, "\1cv82\8.2.") > 0 Тогда
		Возврат "82";
	КонецЕсли;

	Если СтрНайти(ПараметрыЗапуска.ПутьКПлатформе1С, "\1cv81\") > 0 Тогда
		Возврат "81";
	КонецЕсли;

	Возврат "";

КонецФункции

// *****************************************************************
Функция ВсеПараметрыЗапускаЗаполненыКорректно(ПроверятьАдресХранилища = Ложь, ПроверятьИмяПользователяХранилища = Ложь)

	Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.ПутьКПлатформе1С) Тогда
		ТекстОшибки = "Не заполнен путь к платформе 1С!";
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.ВерсияПлатформы) Тогда
		// Попробуем определить версию платформы
		ПараметрыЗапуска.ВерсияПлатформы = ПолучитьВерсиюПлатформы();
		Если Не ЗначениеЗаполнено(ПараметрыЗапуска.ВерсияПлатформы) Тогда
			ТекстОшибки = "Не заполнена версия COMConnector!";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.ТипБазы) Тогда
		ТекстОшибки = "Не заполнен тип базы 1С!";
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.ИмяБазы) Тогда
		ТекстОшибки = "Не заполнено имя базы 1С!";
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыЗапуска.ТипБазы = "S" Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.АдресКластера) Тогда
			ТекстОшибки = "Не заполнен адрес кластера серверов 1С!";
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.ПортКластера) Тогда
			ТекстОшибки = "Не заполнен порт кластера серверов 1С!";
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.ПортАгента) Тогда
			ТекстОшибки = "Не заполнен порт агента кластера серверов 1С!";
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.КодРазрешения) Тогда
			ТекстОшибки = "Не заполнен код разрешения при блокировке сансов 1С!";
			Возврат Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПроверятьАдресХранилища Тогда		
		Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.АдресХранилища) Тогда
			ТекстОшибки = "Не заполнен адрес хранилища конфигурации!";
			Возврат Ложь;
		КонецЕсли;		
	КонецЕсли;
	
	Если ПроверятьИмяПользователяХранилища Тогда		
		Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.ИмяПользователяХранилища) Тогда
			ТекстОшибки = "Не заполнено имя пользователя хранилища конфигурации!";
			Возврат Ложь;
		КонецЕсли;		
	КонецЕсли;		
	
	Возврат Истина;

КонецФункции
 
// *****************************************************************
Функция ОбернутьВКавычки(ВходящаяСтрока)
	Возврат """" + ВходящаяСтрока + """";
КонецФункции

// *****************************************************************
Функция ВставитьПараметрЗапуска(Параметр, Ключ = "", СимволКлюча = "/", ОбернутьВКавычки = Истина)

	Если СтрДлина(Параметр) = 0 Тогда
		Возврат "";
	Иначе
		Если СтрДлина(Ключ) = 0 Тогда
			Если ОбернутьВКавычки Тогда
				Возврат ОбернутьВКавычки(СокрЛП(Параметр)) + " ";
			Иначе
				Возврат Параметр + " ";
			КонецЕсли;
		Иначе
			Если ОбернутьВКавычки Тогда		
				Возврат СимволКлюча + Ключ + ОбернутьВКавычки(СокрЛП(Параметр)) + " ";
			Иначе
				Возврат СимволКлюча + Ключ + СокрЛП(Параметр) + " ";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции 

// *****************************************************************
Функция ПрочитатьТекстовыйФайл(ИмяФайла)

	Если ПустаяСтрока(ИмяФайла) Тогда
		Возврат "";
	КонецЕсли;

	Файл = Новый Файл(ИмяФайла);
	Если Не Файл.Существует() Тогда
		Возврат "";
	КонецЕсли;

	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
	ТекстФайла = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();	

	Возврат ТекстФайла;

КонецФункции

//*****************************************************************
Функция ВыполнитьЗапуск1С(ТипПриложения = "", ДопСтрокаЗапуска = "", ОжидатьЗавершения = Истина, ТонкийКлиент = Ложь)

	КодВозврата = 0;
	ТекстОшибки = "";
	
	// Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Ложь;
	КонецЕсли;

	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");

	СтрокаЗапуска = 
		ВставитьПараметрЗапуска(ПараметрыЗапуска.ПутьКПлатформе1С) +
		ВставитьПараметрЗапуска(ТипПриложения, , , Ложь) +
		ВставитьПараметрЗапуска(ПараметрыЗапуска.ПараметрыЗапускаПлатформы1С, , , Ложь) +
		?(ПараметрыЗапуска.ТипБазы = "S",
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортКластера +  
				"\" + ПараметрыЗапуска.ИмяБазы, ПараметрыЗапуска.ТипБазы),
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяБазы, ПараметрыЗапуска.ТипБазы)) + 
		ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователя, "N") +
		ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователя, "P") +
		ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресХранилища,"ConfigurationRepositoryF") +
		ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователяХранилища,"ConfigurationRepositoryN") +
		ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователяХранилища,"ConfigurationRepositoryP") +
		ВставитьПараметрЗапуска(ПараметрыЗапуска.КодРазрешения, "UC", , Ложь) +
		ВставитьПараметрЗапуска(ИмяФайлаЛога, "Out") +
		?(ПараметрыЗапуска.ВидныДействияВПакетномРежиме, "/Visible ", "") +
		?(ЗначениеЗаполнено(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме), 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме,"DumpResult "),
			"") +
		"/DisableStartupMessages " +
		"/DisableStartupDialogs " +
		ДопСтрокаЗапуска;

	Если ТонкийКлиент Тогда
		СтрокаЗапуска = СтрЗаменить(СтрокаЗапуска, "1cv8.exe", "1cv8c.exe");
	КонецЕсли;
	
	Если РежимОтладки Тогда
		Сообщить(СтрокаЗапуска);
	КонецЕсли;	

	Попытка
  		ЗапуститьПриложение(СтрокаЗапуска, , ОжидатьЗавершения, КодВозврата); 
  	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;

	ТекстСообщения = ПрочитатьТекстовыйФайл(ИмяФайлаЛога);
	УдалитьФайлы(ИмяФайлаЛога);

	// Проверим код возврата
	Если КодВозврата <> 0 Тогда

		ТекстОшибки = "Ошибка запуска выполнения команды, КодВозврата: "  + КодВозврата + Символы.ПС +
			"Строка запуска: " + СтрокаЗапуска + Символы.ПС + 
			"Служебные сообщения: " + Символы.ПС + ТекстСообщения;
		Возврат Ложь;

	КонецЕсли;

	Возврат Истина;

КонецФункции
 
// *****************************************************************
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыФункции

// *****************************************************************
// Выполняет сборс всех параметров запуска к настройкам по умолчанию
//
Процедура ОчиститьПараметры() Экспорт

	ПараметрыЗапуска = Неопределено;
	ИнициироватьПараметры();

КонецПроцедуры

// *****************************************************************
// Возвращает имя файла, построенном по принципу: ИмяБазы + ДатаВремя + Расширение
// Пример: Base_2017_04_28_19_02_12.dt
//
Функция ИмяФайлаПоИмениБазыНаДату(Расширение) Экспорт

	ТекИмяБазы = СокрЛП(ПараметрыЗапуска.ИмяБазы); 
	Если ПараметрыЗапуска.ТипБазы = "F" Тогда		
		НомерСлеша = 0;		
		Для Сч = 1 По СтрДлина(ТекИмяБазы) Цикл
			Если Сред(ТекИмяБазы, Сч, 1) = "\" Тогда
				НомерСлеша = Сч;
			КонецЕсли;
		КонецЦикла;
		ТекИмяБазы = Сред(ТекИмяБазы, НомерСлеша + 1);
	КонецЕсли;
		
	Возврат СокрЛП(ТекИмяБазы) + Формат(ТекущаяДата(),"ДФ=_yyyy_MM_dd_ЧЧ_мм_сс") + "." + Расширение;

КонецФункции

#КонецОбласти

#Область УправлениеКластером

// *****************************************************************
// Получает список текущих сеансов с информационной базой
//
Функция ПолучитьСписокСеансов(ПропускатьКонсольКластера = Ложь) Экспорт

	Если ПустаяСтрока(ПараметрыЗапуска.АдресСервераАдминистрирования) Тогда
		Возврат COM_ПолучитьСписокСеансов(ПропускатьКонсольКластера);
	Иначе
		Возврат СА_ПолучитьСписокСеансов();
	КонецЕсли;

КонецФункции

// *****************************************************************
// Завершает работу пользователей для серверной базы
//
Функция ЗавершитьРаботуПользователей() Экспорт

	Если ПустаяСтрока(ПараметрыЗапуска.АдресСервераАдминистрирования) Тогда
		Возврат COM_ЗавершитьРаботуПользователей();
	Иначе
		Результат = СА_ЗавершитьСеансы();
		Результат = Результат И СА_РазорватьСоединения();
		Возврат Результат;
	КонецЕсли;

КонецФункции

// *****************************************************************
// Устанавливает блокирвку сенасов для серверной базы
//
Функция УстановитьБлокировкуНачалаСеансов(БлокироватьРегламентныеЗадания = Ложь, МинутОжиданияЗавершенияСеансов = 0) Экспорт

	Если ПустаяСтрока(ПараметрыЗапуска.АдресСервераАдминистрирования) Тогда
		Успех = COM_ИзменитьБлокировкуНачалаСеансов(Истина, МинутОжиданияЗавершенияСеансов);
		Если БлокироватьРегламентныеЗадания Тогда
			Успех = Успех И COM_ИзменитьБлокировкуРегламентныхЗаданий(Истина);
		КонецЕсли;
	Иначе
		Успех = СА_ИзменитьБлокировкуНачалаСеансов(Истина, МинутОжиданияЗавершенияСеансов);
		Если БлокироватьРегламентныеЗадания Тогда
			Успех = Успех И СА_ИзменитьБлокировкуРегламентныхЗаданий(Истина);
		КонецЕсли;
	КонецЕсли;

	Возврат Успех;

КонецФункции

// *****************************************************************
// Снимает блокировку сеансов для серверной базы
//
Функция СнятьБлокировкуНачалаСеансов(СнятьБлокировкуРегламентныхЗаданий = Ложь) Экспорт

	Если ПустаяСтрока(ПараметрыЗапуска.АдресСервераАдминистрирования) Тогда
		Успех = COM_ИзменитьБлокировкуНачалаСеансов(Ложь);
		Если СнятьБлокировкуРегламентныхЗаданий Тогда
			Успех = Успех И COM_ИзменитьБлокировкуРегламентныхЗаданий(Ложь);
		КонецЕсли;
	Иначе
		Успех = СА_ИзменитьБлокировкуНачалаСеансов(Ложь);
		Если СнятьБлокировкуРегламентныхЗаданий Тогда
			Успех = Успех И СА_ИзменитьБлокировкуРегламентныхЗаданий(Ложь);
		КонецЕсли;
	КонецЕсли;

	Возврат Успех;

КонецФункции

// *****************************************************************
// Устанавливает блокирвку сенасов для серверной базы
//
Функция УстановитьБлокировкуРегламентныхЗаданий() Экспорт

	Если ПустаяСтрока(ПараметрыЗапуска.АдресСервераАдминистрирования) Тогда
		Возврат COM_ИзменитьБлокировкуРегламентныхЗаданий(Истина);
	Иначе
		Возврат СА_ИзменитьБлокировкуРегламентныхЗаданий(Истина);
	КонецЕсли;

КонецФункции

// *****************************************************************
// Снимает блокирвку сенасов для серверной базы
//
Функция СнятьБлокировкуРегламентныхЗаданий() Экспорт

	Если ПустаяСтрока(ПараметрыЗапуска.АдресСервераАдминистрирования) Тогда
		Возврат COM_ИзменитьБлокировкуРегламентныхЗаданий(Ложь);
	Иначе
		Возврат СА_ИзменитьБлокировкуРегламентныхЗаданий(Ложь);
	КонецЕсли;

КонецФункции

// *****************************************************************
// Возвращает флог блокирвки сенасов для серверной базы
//
Функция ПолучитьБлокировкуРегламентныхЗаданий() Экспорт

	Если ПустаяСтрока(ПараметрыЗапуска.АдресСервераАдминистрирования) Тогда
		Возврат COM_ПолучитьБлокировкуРегламентныхЗаданий();
	Иначе
		ДанныеИнформационнойБазы = СА_ПолучитьДанныеИнформационнойБазы();
		Если ДанныеИнформационнойБазы = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Возврат ДанныеИнформационнойБазы.scheduledjobsdeny;
		КонецЕсли;
	КонецЕсли;

КонецФункции

// *****************************************************************
// Удаляет информационную базу из кластера
//
// Параметры:
//  Режим - режим удаления информационной базы: 
//			0 - при удалении информационной базы базу данных не удалять; 
//			1 - при удалении информационной базы удалить базу данных; 
//			2 - при удалении информационной базы очистить базу данных.
//
Функция УдалитьИнформационнуюБазу(Режим = 0) Экспорт

  Возврат COM_УдалитьИнформационнуюБазу(Режим);
  // ДОДЕЛАТЬ ДЛЯ СЕРВЕРА АДМИНИСТРИРОВАНИЯ

КонецФункции

#Область УправлениеКластеромЧерезCOM

// *****************************************************************
// Получает список текущих сеансов с информационной базой
//
Функция COM_ПолучитьСписокСеансов(ПропускатьКонсольКластера = Истина) Экспорт
 
	БазаБылаНайдена = Ложь;
	ТекстОшибки  = "";
   
   // Проверим, не файловая ли база
   Если ПараметрыЗапуска.ТипБазы = "F" Тогда
	   ТекстОшибки = "Недоступно для файловой базы";
	   Возврат Неопределено;
   КонецЕсли;
   
   // Проверим ключевые параметры запуска
   Если Не ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
	   Возврат Неопределено;
   КонецЕсли;
   
   ТаблицаСеансов = Новый ТаблицаЗначений;
   ТаблицаСеансов.Колонки.Добавить("НомерСоединения");
   ТаблицаСеансов.Колонки.Добавить("ВремяНачала");
   ТаблицаСеансов.Колонки.Добавить("ИмяПользователя");
   ТаблицаСеансов.Колонки.Добавить("ИмяКомпьютера");
   ТаблицаСеансов.Колонки.Добавить("Приложение");
	
   Попытка
	   
		// Получаем COMConnector
		Коннектор = Новый COMОбъект("v" + ПараметрыЗапуска.ВерсияПлатформы + ".COMConnector");
		// Получаем Соединение с агентом сервера
		СоединениеСАгентомСервера = Коннектор.ConnectAgent(ПараметрыЗапуска.АдресКластера 
			+ ":" + ПараметрыЗапуска.ПортАгента);
	   
		// Получаем список кластеров		
		КластерыСерверов = СоединениеСАгентомСервера.GetClusters(); 
		Для Каждого КластерСерверов Из КластерыСерверов Цикл			
		   
			// Аутентификация администратора кластера серверов
			СоединениеСАгентомСервера.Authenticate(
				КластерСерверов,ПараметрыЗапуска.ИмяПользователяАдминистратораКластера, 
				ПараметрыЗапуска.ПарольПользователяАдминистратораКластера);
		   
			// Получаем все рабочие процессы
			РабочиеПроцессы = СоединениеСАгентомСервера.GetWorkingProcesses(КластерСерверов);
			Для Каждого РабочийПроцесс Из РабочиеПроцессы Цикл

				// Создаем соединение с рабочим процессом
				Если ПараметрыЗапуска.АдресКластера <> РабочийПроцесс.HostName Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					СоединениеСРабочимПроцессом = Коннектор.ConnectWorkingProcess(
						ПараметрыЗапуска.АдресКластера + ":" + СтрЗаменить(РабочийПроцесс.MainPort, Символы.НПП, ""));
				Исключение
					// Рабочего процесса может уже не быть.
					Продолжить;
				КонецПопытки;
			   
			   // Выполняем аутентификацию
			   СоединениеСРабочимПроцессом.AddAuthentication(
				   	ПараметрыЗапуска.ИмяПользователя, 
					ПараметрыЗапуска.ПарольПользователя);
			   
			   // Получаем информационные базы
			   ИнформационныеБазы = СоединениеСРабочимПроцессом.GetInfoBases();				
			   Для Каждого ИнформационнаяБаза ИЗ ИнформационныеБазы Цикл
				   
					Если НРег(ИнформационнаяБаза.Name) = НРег(ПараметрыЗапуска.ИмяБазы) Тогда
				   
						// Пометим, что база была найдена
						БазаБылаНайдена = Истина;
						
						// Получаем массив соединений информационной базы
						Соединения = СоединениеСРабочимПроцессом.GetInfoBaseConnections(ИнформационнаяБаза);
						Для Каждого Соединение Из Соединения Цикл
						
							// Не трогаем сенасы в коносле кластера
							Если ПропускатьКонсольКластера И НРег(Соединение.AppID) = "comconsole" Тогда
								Продолжить;
							КонецЕсли;
							
							// Добавить соединение в таблицу
							НоваяСтрока = ТаблицаСеансов.Добавить();
							НоваяСтрока.НомерСоединения = Соединение.ConnID;
							НоваяСтрока.ВремяНачала = Соединение.ConnectedAt;
							НоваяСтрока.ИмяКомпьютера = Соединение.HostName;
							НоваяСтрока.ИмяПользователя = Соединение.UserName;
							
							Приложение = Соединение.AppID;
							Если Приложение = "1CV8"
								ИЛИ Приложение = "1CV8C" Тогда
								НоваяСтрока.Приложение = "1С:Предприятие";
							ИначеЕсли Приложение = "Designer" Тогда
								НоваяСтрока.Приложение = "Конфигуратор";
							ИначеЕсли Приложение = "SrvrConsole" Тогда
								НоваяСтрока.Приложение = "Консоль кластера";
							ИначеЕсли Приложение = "BackgroundJob" Тогда
								НоваяСтрока.Приложение = "Фоновое задание";
							Иначе
								НоваяСтрока.Приложение = Приложение;
							КонецЕсли;
							   
					   	КонецЦикла;						
		   
					   	Прервать;					
 
				   	КонецЕсли;
				   
			  	 КонецЦикла;
	   
		   	КонецЦикла;
		   
	  	 КонецЦикла;	
	   
	Исключение		
		ТекстОшибки = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;	

	Если Не БазаБылаНайдена Тогда
		ТекстОшибки = "Информационная база не была найдена в кластере";
		Возврат Неопределено;
	Иначе
		Возврат ТаблицаСеансов;
	КонецЕсли;
   
КонецФункции

// *****************************************************************
Функция COM_ЗавершитьРаботуПользователей() Экспорт
 
 	БазаБылаНайдена = Ложь;
	ТекстОшибки  = "";
	
	// Проверим, не файловая ли база
	Если ПараметрыЗапуска.ТипБазы = "F" Тогда
		ТекстОшибки = "Недоступно для файловой базы";
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Ложь;
	КонецЕсли;
 	
	Попытка
		
		// Получаем COMConnector
		Коннектор = Новый COMОбъект("v" + ПараметрыЗапуска.ВерсияПлатформы + ".COMConnector");
		// Получаем Соединение с агентом сервера
		СоединениеСАгентомСервера = Коннектор.ConnectAgent(
			ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортАгента);
		
		// Получаем список кластеров		
		КластерыСерверов = СоединениеСАгентомСервера.GetClusters(); 
		Для Каждого КластерСерверов Из КластерыСерверов Цикл			
			
			// Аутентификация администратора кластера серверов
			СоединениеСАгентомСервера.Authenticate(
				КластерСерверов,ПараметрыЗапуска.ИмяПользователяАдминистратораКластера,
				ПараметрыЗапуска.ПарольПользователяАдминистратораКластера);
			
			ИнформационныеБазы = СоединениеСАгентомСервера.GetInfoBases(КластерСерверов);
			Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
				Если ИнформационнаяБаза.Name = ПараметрыЗапуска.ИмяБазы Тогда
					Сеансы = СоединениеСАгентомСервера.GetInfoBaseSessions(КластерСерверов, ИнформационнаяБаза);
					Для Каждого Сеанс Из Сеансы Цикл
						СоединениеСАгентомСервера.TerminateSession(КластерСерверов, Сеанс);
					КонецЦикла;
				КонецЕсли;		
			КонецЦикла;
			
			// Получаем все рабочие процессы
			РабочиеПроцессы = СоединениеСАгентомСервера.GetWorkingProcesses(КластерСерверов);
			Для Каждого РабочийПроцесс Из РабочиеПроцессы Цикл
				
				// Создаем соединение с рабочим процессом
				Если НРег(ПараметрыЗапуска.АдресКластера) <> НРег(РабочийПроцесс.HostName) Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					СоединениеСРабочимПроцессом = Коннектор.ConnectWorkingProcess(
						ПараметрыЗапуска.АдресКластера + ":" + СтрЗаменить(РабочийПроцесс.MainPort, Символы.НПП, ""));
				Исключение
					// Рабочего процесса может уже не быть.
					Продолжить;
				КонецПопытки;

				// Выполняем аутентификацию
				СоединениеСРабочимПроцессом.AddAuthentication(
					ПараметрыЗапуска.ИмяПользователя,
					ПараметрыЗапуска.ПарольПользователя);

				// Разрываем сеансы для указанной информационной базы
				Сеансы = СоединениеСАгентомСервера.GetSessions(КластерСерверов);
				Для Каждого Сеанс Из Сеансы Цикл
					Если  НРег(Сеанс.InfoBase.Name) = НРег(ПараметрыЗапуска.ИмяБазы) Тогда
						СоединениеСАгентомСервера.TerminateSession(КластерСерверов, Сеанс);
					КонецЕсли;
				КонецЦикла;	
				
				// Теперь разрываем соединения
				// Получаем информационные базы
				ИнформационныеБазы = СоединениеСРабочимПроцессом.GetInfoBases();				
				Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
					
					Если НРег(ИнформационнаяБаза.Name) = НРег(ПараметрыЗапуска.ИмяБазы) Тогда
					
						// Пометим, что база была найдена
						БазаБылаНайдена = Истина;
						
						// Получаем массив соединений информационной базы
						Соединения = СоединениеСРабочимПроцессом.GetInfoBaseConnections(ИнформационнаяБаза);
						Для Каждого Соединение Из Соединения Цикл
							
							// Не трогаем сенасы в коносле кластера
							Если НРег(Соединение.AppID) = "comconsole" Тогда
								Продолжить;
							КонецЕсли;
							
							// Разрываем соединение
							СоединениеСРабочимПроцессом.Disconnect(Соединение);
							
						КонецЦикла;

						Прервать;					
  
					КонецЕсли;
					
				КонецЦикла;
		
			КонецЦикла;
			
		КонецЦикла;	
		
	Исключение		
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	
	
	Если НЕ БазаБылаНайдена Тогда
		ТекстОшибки = "Информационная база не была найдена в кластере";
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// *****************************************************************
Функция COM_ИзменитьБлокировкуНачалаСеансов(Флаг = Истина, МинутОжиданияЗавершенияСеансов = 0) Экспорт
	
 	БазаБылаНайдена = Ложь;
	ТекстОшибки  = "";
	
	// Проверим, не файловая ли база
	Если ПараметрыЗапуска.ТипБазы = "F" Тогда
		ТекстОшибки = "Недоступно для файловой базы";
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		
		// Получаем COMConnector
		Коннектор = Новый COMОбъект("v" + ПараметрыЗапуска.ВерсияПлатформы + ".COMConnector");
		// Получаем Соединение с агентом сервера
		СоединениеСАгентомСервера = Коннектор.ConnectAgent(
			ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортАгента);
		
		// Получаем список кластеров		
		КластерыСерверов = СоединениеСАгентомСервера.GetClusters(); 
		Для Каждого КластерСерверов Из КластерыСерверов Цикл			
			
			// Аутентификация администратора кластера серверов
			СоединениеСАгентомСервера.Authenticate(
				КластерСерверов,
				ПараметрыЗапуска.ИмяПользователяАдминистратораКластера,
				ПараметрыЗапуска.ПарольПользователяАдминистратораКластера);
			
			// Получаем все рабочие процессы
			РабочиеПроцессы = СоединениеСАгентомСервера.GetWorkingProcesses(КластерСерверов);
			Для Каждого РабочийПроцесс Из РабочиеПроцессы Цикл
				
				// Создаем соединение с рабочим процессом
				Если ПараметрыЗапуска.АдресКластера <> РабочийПроцесс.HostName Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					СоединениеСРабочимПроцессом = Коннектор.ConnectWorkingProcess(
						ПараметрыЗапуска.АдресКластера + ":" + СтрЗаменить(РабочийПроцесс.MainPort, Символы.НПП, ""));
				Исключение
					// Рабочего процесса может уже не быть.
					Продолжить;
				КонецПопытки;

				// Выполняем аутентификацию
				СоединениеСРабочимПроцессом.AddAuthentication(
					ПараметрыЗапуска.ИмяПользователя,
					ПараметрыЗапуска.ПарольПользователя);
				
				// Получаем информационные базы
				ИнформационныеБазы = СоединениеСРабочимПроцессом.GetInfoBases();				
				Для Каждого ИнформационнаяБаза ИЗ ИнформационныеБазы Цикл
					
					Если НРег(ИнформационнаяБаза.Name) = НРег(ПараметрыЗапуска.ИмяБазы) Тогда
					
						// Пометим, что база была найдена
						БазаБылаНайдена = Истина;
						
						// Блокируем начало сеансов
						Если ПараметрыЗапуска.ВерсияПлатформы = "81" Тогда
							ИнформационнаяБаза.ConnectDenied = Флаг;
						Иначе
							ИнформационнаяБаза.SessionsDenied = Флаг;
						КонецЕсли;

						Если Флаг Тогда
							ИнформационнаяБаза.PermissionCode = ПараметрыЗапуска.КодРазрешения;
							ИнформационнаяБаза.DeniedMessage = ПараметрыЗапуска.СообщениеПриБлокировке;
							ИнформационнаяБаза.DeniedFrom = ТекущаяДата() + 60 * МинутОжиданияЗавершенияСеансов;
						Иначе
							ИнформационнаяБаза.PermissionCode = "";
							ИнформационнаяБаза.DeniedMessage = "";
							ИнформационнаяБаза.DeniedFrom = Дата("00010101");
						КонецЕсли;
						
						// Изменяем параметры информационной базы
						СоединениеСРабочимПроцессом.UpdateInfoBase(ИнформационнаяБаза);
					
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
		
			КонецЦикла;
			
		КонецЦикла;	
		
	Исключение		
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	
	
	Если НЕ БазаБылаНайдена Тогда
		ТекстОшибки = "Информационная база не была найдена в кластере";
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
 
// *****************************************************************
// Устанавливает блокировку регламентных заданий для серверной базы
//
Функция COM_ИзменитьБлокировкуРегламентныхЗаданий(Флаг = Истина) Экспорт
	
	БазаБылаНайдена = Ложь;
   	ТекстОшибки  = "";
   
	// Проверим, не файловая ли база
	Если ПараметрыЗапуска.ТипБазы = "F" Тогда
		ТекстОшибки = "Недоступно для файловой базы";
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
	   
		// Получаем COMConnector
		Коннектор = Новый COMОбъект("v" + ПараметрыЗапуска.ВерсияПлатформы + ".COMConnector");
		// Получаем Соединение с агентом сервера
		СоединениеСАгентомСервера = Коннектор.ConnectAgent(
			ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортАгента);
		
		// Получаем список кластеров		
		КластерыСерверов = СоединениеСАгентомСервера.GetClusters(); 
		Для Каждого КластерСерверов Из КластерыСерверов Цикл			
		   
			// Аутентификация администратора кластера серверов
			СоединениеСАгентомСервера.Authenticate(
				КластерСерверов,
				ПараметрыЗапуска.ИмяПользователяАдминистратораКластера,
				ПараметрыЗапуска.ПарольПользователяАдминистратораКластера);
			
			// Получаем все рабочие процессы
			РабочиеПроцессы = СоединениеСАгентомСервера.GetWorkingProcesses(КластерСерверов);
			Для Каждого РабочийПроцесс Из РабочиеПроцессы Цикл
				
				Попытка
					СоединениеСРабочимПроцессом = Коннектор.ConnectWorkingProcess(
						ПараметрыЗапуска.АдресКластера + ":" + СтрЗаменить(РабочийПроцесс.MainPort, Символы.НПП, ""));
				Исключение
					// Рабочего процесса может уже не быть.
					Продолжить;
				КонецПопытки;

				// Выполняем аутентификацию
				СоединениеСРабочимПроцессом.AddAuthentication(
					ПараметрыЗапуска.ИмяПользователя,
					ПараметрыЗапуска.ПарольПользователя);
				
				// Получаем информационные базы
				ИнформационныеБазы = СоединениеСРабочимПроцессом.GetInfoBases();				
				Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
					
					Если НРег(ИнформационнаяБаза.Name) = НРег(ПараметрыЗапуска.ИмяБазы) Тогда
					
						// Пометим, что база была найдена
						БазаБылаНайдена = Истина;
						
						// Блокируем регламентные задания
						ИнформационнаяБаза.ScheduledJobsDenied = Флаг;
						
						// Изменяем параметры информационной базы
						СоединениеСРабочимПроцессом.UpdateInfoBase(ИнформационнаяБаза);
					
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
		
			КонецЦикла;
			
		КонецЦикла;	
		
	Исключение		
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	

	Если НЕ БазаБылаНайдена Тогда
		ТекстОшибки = "Информационная база не была найдена в кластере";
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
   
КонецФункции

// *****************************************************************
// Проверяет наличие блокировки регламентных заданий для серверной базы
//
Функция COM_ПолучитьБлокировкуРегламентныхЗаданий() Экспорт
	
	БазаБылаНайдена = Ложь;
   	ТекстОшибки  = "";
   
	// Проверим, не файловая ли база
	Если ПараметрыЗапуска.ТипБазы = "F" Тогда
		ТекстОшибки = "Недоступно для файловой базы";
		Возврат Неопределено;
	КонецЕсли;
	
	// Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		
		// Получаем COMConnector
		Коннектор = Новый COMОбъект("v" + ПараметрыЗапуска.ВерсияПлатформы + ".COMConnector");
		//Получаем Соединение с агентом сервера
		СоединениеСАгентомСервера = Коннектор.ConnectAgent(
			ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортАгента);
		
		// Получаем список кластеров		
		КластерыСерверов = СоединениеСАгентомСервера.GetClusters(); 
		Для Каждого КластерСерверов Из КластерыСерверов Цикл			
			
			// Аутентификация администратора кластера серверов
			СоединениеСАгентомСервера.Authenticate(
				КластерСерверов,
				ПараметрыЗапуска.ИмяПользователяАдминистратораКластера,
				ПараметрыЗапуска.ПарольПользователяАдминистратораКластера);
			
			// Получаем все рабочие процессы
			РабочиеПроцессы = СоединениеСАгентомСервера.GetWorkingProcesses(КластерСерверов);
			Для Каждого РабочийПроцесс Из РабочиеПроцессы Цикл
				
				Попытка
					СоединениеСРабочимПроцессом = Коннектор.ConnectWorkingProcess(
						ПараметрыЗапуска.АдресКластера + ":" + СтрЗаменить(РабочийПроцесс.MainPort, Символы.НПП, ""));
				Исключение
					// Рабочего процесса может уже не быть.
					Продолжить;
				КонецПопытки;

				// Выполняем аутентификацию
				СоединениеСРабочимПроцессом.AddAuthentication(
					ПараметрыЗапуска.ИмяПользователя,
					ПараметрыЗапуска.ПарольПользователя);
				
				// Получаем информационные базы
				ИнформационныеБазы = СоединениеСРабочимПроцессом.GetInfoBases();				
				Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
					
					Если НРег(ИнформационнаяБаза.Name) = НРег(ПараметрыЗапуска.ИмяБазы) Тогда
					
						// Пометим, что база была найдена
						БазаБылаНайдена = Истина;
						
						// Блокируем регламентные задания
						Возврат ИнформационнаяБаза.ScheduledJobsDenied;
						
					КонецЕсли;
					
				КонецЦикла;
		
			КонецЦикла;
			
		КонецЦикла;	
		
	Исключение		
		ТекстОшибки = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;	
	
	Если НЕ БазаБылаНайдена Тогда
		ТекстОшибки = "Информационная база не была найдена в кластере";
	КонецЕсли;

	Возврат Неопределено;
   
КонецФункции

// *****************************************************************
// Удаляет информационную базу из кластера серверов
//
// Параметры:
//  Режим - режим удаления информационной базы: 
//			0 - при удалении информационной базы базу данных не удалять; 
//			1 - при удалении информационной базы удалить базу данных; 
//			2 - при удалении информационной базы очистить базу данных.
//
Функция COM_УдалитьИнформационнуюБазу(Режим=0) Экспорт
 
	БазаБылаНайдена = Ложь;
	ТекстОшибки  = "";
   
	// Проверим, не файловая ли база
	Если ПараметрыЗапуска.ТипБазы = "F" Тогда
		ТекстОшибки = "Недоступно для файловой базы";
		Возврат Ложь;
	КонецЕсли;
   
	// Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверим отсутствие сеансов пользователей
	ТаблицаПользователи = ПолучитьСписокСеансов();
	Если ТаблицаПользователи = Неопределено Или ТаблицаПользователи.Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Попытка
	   
		// Получаем COMConnector
		Коннектор = Новый COMОбъект("v" + ПараметрыЗапуска.ВерсияПлатформы + ".COMConnector");
		// Получаем Соединение с агентом сервера
		СоединениеСАгентомСервера = Коннектор.ConnectAgent(
			ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортАгента);
		
		// Получаем список кластеров		
		КластерыСерверов = СоединениеСАгентомСервера.GetClusters(); 
		Для Каждого КластерСерверов Из КластерыСерверов Цикл			
			
			// Аутентификация администратора кластера серверов
			СоединениеСАгентомСервера.Authenticate(
				КластерСерверов,
				ПараметрыЗапуска.ИмяПользователяАдминистратораКластера,
				ПараметрыЗапуска.ПарольПользователяАдминистратораКластера);
			
			// Получаем все рабочие процессы
			РабочиеПроцессы = СоединениеСАгентомСервера.GetWorkingProcesses(КластерСерверов);
			Для Каждого РабочийПроцесс Из РабочиеПроцессы Цикл
			   
				// Создаем соединение с рабочим процессом
				СоединениеСРабочимПроцессом = Коннектор.ConnectWorkingProcess(
					ПараметрыЗапуска.АдресКластера + ":" + СтрЗаменить(РабочийПроцесс.MainPort, Символы.НПП, ""));
				
				// Выполняем аутентификацию
				СоединениеСРабочимПроцессом.AddAuthentication(
					ПараметрыЗапуска.ИмяПользователя,
					ПараметрыЗапуска.ПарольПользователя);
				
				// Получаем информационные базы
				ИнформационныеБазы = СоединениеСРабочимПроцессом.GetInfoBases();				
				Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
					
					Если НРег(ИнформационнаяБаза.Name) = НРег(ПараметрыЗапуска.ИмяБазы) Тогда
					
						// Пометим, что база была найдена
						БазаБылаНайдена = Истина;
						
						СоединениеСРабочимПроцессом.DropInfoBase(ИнформационнаяБаза, Режим);
						Прервать;					

					КонецЕсли;
					
				КонецЦикла;
	   
		   	КонецЦикла;
		   
	  	КонецЦикла;	
	   
	Исключение		
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	

	Если НЕ БазаБылаНайдена Тогда
		ТекстОшибки = "Информационная база не была найдена в кластере";
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
   
КонецФункции

#КонецОбласти

#Область СерверАдминистрирования

// *****************************************************************
Функция СА_ПолучитьПутьКRAC()

	ТекстОшибки = "";

	Если НРег(Прав(ПараметрыЗапуска.ПутьКПлатформе1С, 8)) = "1cv8.exe" Тогда
		ПутьКRAC = СтрЗаменить(ПараметрыЗапуска.ПутьКПлатформе1С, "1cv8.exe", "rac.exe");
	Иначе
		ПутьКRAC = ОбъединитьПути(ПараметрыЗапуска.ПутьКПлатформе1С, "rac.exe");
	КонецЕсли;

	Файл = Новый Файл(ПутьКRAC);
	Если Не Файл.Существует() Тогда
		ТекстОшибки = "Не найдена утилита: " + ПутьКRAC;
		Возврат Неопределено;
	КонецЕсли;

	Возврат ПутьКRAC;

КонецФункции

// *****************************************************************
Функция СА_ПолучитьСписокКластеров()

	// Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПутьКRAC = СА_ПолучитьПутьКRAC();
	Если ПутьКRAC = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если РежимОтладки Тогда
		Сообщить("Получаем список кластеров:");
	КонецЕсли;

	// Получим список кластеров
	МассивКластеров = Новый Массив;
	
	Команда = Новый Команда;
	Команда.УстановитьКоманду("""" + ПутьКRAC + """");
	Команда.ДобавитьПараметр("""" + ПараметрыЗапуска.АдресСервераАдминистрирования + """");
	Команда.ДобавитьПараметр("cluster list");

	Для Сч = 1 По ПараметрыЗапуска.КоличествоПопытокПодключенияККластеру Цикл

		КодВозврата = Команда.Исполнить();
		Вывод = Команда.ПолучитьВывод();

		Если КодВозврата = 0 Тогда
			
			ТекКластер = "";
			ТекХост = "";
			ТекПорт = "";
			Для Каждого ТекСтрока Из СтрРазделить(Вывод, Символы.ПС) Цикл
				
				ТекПараметры = СтрРазделить(ТекСтрока, ":");		
				Если ТекПараметры.Количество() = 2 Тогда		
					
					Если СокрЛП(ТекПараметры.Получить(0)) = "cluster" Тогда
						ТекКластер = СокрЛП(ТекПараметры.Получить(1));
					ИначеЕсли СокрЛП(ТекПараметры.Получить(0)) = "host" Тогда
						ТекХост = СокрЛП(ТекПараметры.Получить(1));
					ИначеЕсли СокрЛП(ТекПараметры.Получить(0)) = "port" Тогда
						ТекПорт = СокрЛП(ТекПараметры.Получить(1));
					Иначе
						Продолжить;
					КонецЕсли;

					Если НРег(ТекХост) = НРег(ПараметрыЗапуска.АдресКластера)
						И НРег(ТекПорт) = НРег(ПараметрыЗапуска.ПортКластера) Тогда
						
						МассивКластеров.Добавить(ТекКластер);
						Если РежимОтладки Тогда
							Сообщить("	Найден класер: " + ТекКластер + ", хост: " + ТекХост + ", порт: " + ТекПорт);
						КонецЕсли;

						ТекКластер = "";
						ТекХост = "";
						ТекПорт = "";

					КонецЕсли;
				КонецЕсли;

			КонецЦикла;
			Прервать;
			
		ИначеЕсли Сч = ПараметрыЗапуска.КоличествоПопытокПодключенияККластеру Тогда
			ТекстОшибки = "Ошибка получения списка кластеров, код возврата = " + КодВозврата + Символы.ПС + Вывод;
			Возврат Неопределено;
		Иначе
			// Подождем и сделаем еще одну попытку
			Приостановить(1000 * 20 * Сч);
		КонецЕсли;

	КонецЦикла;

	Возврат МассивКластеров;

КонецФункции

// *****************************************************************
Функция СА_ПолучитьИДБазыПоИмени()

	МассивКластеров = СА_ПолучитьСписокКластеров();
	Если МассивКластеров = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПутьКRAC = СА_ПолучитьПутьКRAC();
	Если ПутьКRAC = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Получим ИД информационной базы на кластере
	ТекИД = "";
	Для Каждого ТекКластер Из МассивКластеров Цикл
		Команда = Новый Команда;
		Команда.УстановитьКоманду("""" + ПутьКRAC + """");
		Команда.ДобавитьПараметр("""" + ПараметрыЗапуска.АдресСервераАдминистрирования + """");
		Команда.ДобавитьПараметр("infobase");
		Команда.ДобавитьПараметр("--cluster=" + ТекКластер);
		Команда.ДобавитьПараметр("summary list");
		КодВозврата = Команда.Исполнить();
		Вывод = Команда.ПолучитьВывод();
		Если КодВозврата = 0 Тогда
			ТекИД = "";
			ТекИмя = "";
			Для Каждого ТекСтрока Из СтрРазделить(Вывод, Символы.ПС) Цикл
				ТекПараметры = СтрРазделить(ТекСтрока, ":");
				Если ТекПараметры.Количество() = 2 Тогда			
							
					Если СокрЛП(ТекПараметры.Получить(0)) = "infobase" Тогда
						ТекИД = СокрЛП(ТекПараметры.Получить(1));
					ИначеЕсли СокрЛП(ТекПараметры.Получить(0)) = "name" Тогда
						ТекИмя = СокрЛП(ТекПараметры.Получить(1));
					Иначе
						Продолжить;
					КонецЕсли;

					Если НРег(ТекИмя) = НРег(ПараметрыЗапуска.ИмяБазы) Тогда
						Возврат ТекИД;
					КонецЕсли;

				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекстОшибки = "Ошибка получения списка информационных баз, код возврата = " + КодВозврата + Символы.ПС + Вывод;
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;

	Возврат ТекИД;

КонецФункции

// *****************************************************************
Функция СА_ПолучитьСписокСоединений()

	ПутьКRAC = СА_ПолучитьПутьКRAC();
	Если ПутьКRAC = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивКластеров = СА_ПолучитьСписокКластеров();
	Если МассивКластеров = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИДБазы = СА_ПолучитьИДБазыПоИмени();
	Если ИДБазы = "" Или ИДБазы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если РежимОтладки Тогда
		Сообщить("Получаем список соединений:")
	КонецЕсли;

	// Получим список соединенией
	ТаблицаСоединений = Новый ТаблицаЗначений;
	ТаблицаСоединений.Колонки.Добавить("Процесс");
	ТаблицаСоединений.Колонки.Добавить("Соединение");
	ТаблицаСоединений.Колонки.Добавить("Кластер");
	ТаблицаСоединений.Колонки.Добавить("База");
	ТаблицаСоединений.Колонки.Добавить("Приложение");
	Для Каждого ТекКластер Из МассивКластеров Цикл
		Команда = Новый Команда;
		Команда.УстановитьКоманду("""" + ПутьКRAC + """");
		Команда.ДобавитьПараметр("""" + ПараметрыЗапуска.АдресСервераАдминистрирования + """");
		Команда.ДобавитьПараметр("connection");
		Команда.ДобавитьПараметр("--cluster=" + ТекКластер);
		Если ЗначениеЗаполнено(ПараметрыЗапуска.ИмяПользователяАдминистратораКластера) Тогда
			Команда.ДобавитьПараметр("--cluster-user=" + """" + ПараметрыЗапуска.ИмяПользователяАдминистратораКластера + """");
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыЗапуска.ПарольПользователяАдминистратораКластера) Тогда
			Команда.ДобавитьПараметр("--cluster-pwd=" + """" + ПараметрыЗапуска.ПарольПользователяАдминистратораКластера + """");
		КонецЕсли;
		Команда.ДобавитьПараметр("list");
		Команда.ДобавитьПараметр("--infobase=" + ИДБазы);
		Команда.ДобавитьПараметр("--infobase-user=" + ПараметрыЗапуска.ИмяПользователя);
		Команда.ДобавитьПараметр("--infobase-pwd=" + ПараметрыЗапуска.ПарольПользователя);
		КодВозврата = Команда.Исполнить();
		Вывод = Команда.ПолучитьВывод();
		Если КодВозврата = 0 Тогда

			Для Каждого ТекСтрока Из СтрРазделить(Вывод, Символы.ПС) Цикл
				
				ТекПараметры = СтрРазделить(ТекСтрока, ":");
				Если ТекПараметры.Количество() = 2 Тогда			
							
					Если СокрЛП(ТекПараметры.Получить(0)) = "connection" Тогда
						НСтрока = ТаблицаСоединений.Добавить();
						НСтрока.Соединение = СокрЛП(ТекПараметры.Получить(1));
						НСтрока.Кластер = ТекКластер;
					ИначеЕсли СокрЛП(ТекПараметры.Получить(0)) = "process" Тогда
						НСтрока.Процесс = СокрЛП(ТекПараметры.Получить(1));
					ИначеЕсли СокрЛП(ТекПараметры.Получить(0)) = "infobase" Тогда
						НСтрока.База = СокрЛП(ТекПараметры.Получить(1));
					ИначеЕсли СокрЛП(ТекПараметры.Получить(0)) = "application" Тогда
						НСтрока.Приложение = СокрЛП(ТекПараметры.Получить(1));
					Иначе
						Продолжить;
					КонецЕсли;

				КонецЕсли;
			КонецЦикла;

		Иначе
			ТекстОшибки = "Ошибка получения списка соединений, код возврата = " + КодВозврата + Символы.ПС + Вывод;
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;

	Если РежимОтладки Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаСоединений Цикл
			Сообщить("	Найдено соединение: " + СтрокаТаблицы.Соединение + ", кластер: " + СтрокаТаблицы.Кластер + ", процесс: " + СтрокаТаблицы.Процесс + ", база: " + СтрокаТаблицы.База + ", приложение: " + СтрокаТаблицы.Приложение);
		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицаСоединений;

КонецФункции

// *****************************************************************
Функция СА_РазорватьСоединения()

	ПутьКRAC = СА_ПолучитьПутьКRAC();
	Если ПутьКRAC = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Получим соединения
	ТаблицаСоединений = СА_ПолучитьСписокСоединений();
	Если ТаблицаСоединений = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если РежимОтладки Тогда
		Сообщить("Разорвать соединения:")
	КонецЕсли;

	ДопустимоеЧислоПопыток = 5;
	СчетчикПопыток = 0;
	Пока ТаблицаСоединений.Количество() > 0 Цикл
	
		Соединение = ТаблицаСоединений.Получить(0);

		Команда = Новый Команда;
		Команда.УстановитьКоманду("""" + ПутьКRAC + """");
		Команда.ДобавитьПараметр("""" + ПараметрыЗапуска.АдресСервераАдминистрирования + """");
		Команда.ДобавитьПараметр("connection");
		Команда.ДобавитьПараметр("--cluster=" + Соединение.Кластер);
		Если ЗначениеЗаполнено(ПараметрыЗапуска.ИмяПользователяАдминистратораКластера) Тогда
			Команда.ДобавитьПараметр("--cluster-user=" + """" + ПараметрыЗапуска.ИмяПользователяАдминистратораКластера + """");
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыЗапуска.ПарольПользователяАдминистратораКластера) Тогда
			Команда.ДобавитьПараметр("--cluster-pwd=" + """" + ПараметрыЗапуска.ПарольПользователяАдминистратораКластера + """");
		КонецЕсли;
		Команда.ДобавитьПараметр("disconnect");
		Команда.ДобавитьПараметр("--process=" + Соединение.Процесс);
		Команда.ДобавитьПараметр("--connection=" + Соединение.Соединение);
		Команда.ДобавитьПараметр("--infobase-user=" + ПараметрыЗапуска.ИмяПользователя);
		Команда.ДобавитьПараметр("--infobase-pwd=" + ПараметрыЗапуска.ПарольПользователя);
		КодВозврата = Команда.Исполнить();
		Вывод = Команда.ПолучитьВывод();
		Если КодВозврата <> 0 Тогда
			Если СокрЛП(Вывод) = "Служебное соединение не может быть удалено" Тогда
				Если РежимОтладки Тогда
					Сообщить("	Служебное соединение: " + Соединение.Соединение + " не может быть удалено!");
				КонецЕсли;
				ТаблицаСоединений.Удалить(Соединение);
				Продолжить;
			Иначе
				Если СчетчикПопыток = ДопустимоеЧислоПопыток Тогда 
					ТекстОшибки = "Ошибка разрыва соединений, код возврата = " + КодВозврата + Символы.ПС + Вывод;
					Возврат Ложь;
				Иначе
					СчетчикПопыток = СчетчикПопыток + 1;
					Если РежимОтладки Тогда
						Сообщить("	Соединение: " + Соединение.Соединение + " завершить не удалось!" + Символы.ПС + Вывод);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если РежимОтладки Тогда
				Сообщить("	Соединение: " + Соединение.Соединение + " завершено!");
			КонецЕсли;
		КонецЕсли;

		// Получим соединения снова, т. к. могли появиться новые соединения или отвалиться старые
		ТаблицаСоединений = СА_ПолучитьСписокСоединений();
		Если ТаблицаСоединений = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

	КонецЦикла;

	Если РежимОтладки Тогда
		Сообщить("	УСПЕШНО");
	КонецЕсли;

	Возврат Истина;

КонецФункции

// *****************************************************************
Функция СА_ПолучитьСписокСеансов() Экспорт

	Если РежимОтладки Тогда
		Сообщить("Получаем список сеансов:")
	КонецЕсли;

	ПутьКRAC = СА_ПолучитьПутьКRAC();
	Если ПутьКRAC = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивКластеров = СА_ПолучитьСписокКластеров();
	Если МассивКластеров = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИДБазы = СА_ПолучитьИДБазыПоИмени();
	Если ИДБазы = "" Или ИДБазы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Получим список соединенией
	ТаблицаСеансов = Новый ТаблицаЗначений;
	ТаблицаСеансов.Колонки.Добавить("Кластер");
	ТаблицаСеансов.Колонки.Добавить("Процесс");
	ТаблицаСеансов.Колонки.Добавить("Сеанс");
	ТаблицаСеансов.Колонки.Добавить("Соединение");
	ТаблицаСеансов.Колонки.Добавить("НомерСоединения");
	ТаблицаСеансов.Колонки.Добавить("ВремяНачала");	
	ТаблицаСеансов.Колонки.Добавить("База");
	ТаблицаСеансов.Колонки.Добавить("ИмяПользователя");
	ТаблицаСеансов.Колонки.Добавить("ИмяКомпьютера");
	ТаблицаСеансов.Колонки.Добавить("Приложение");

	Для Каждого ТекКластер Из МассивКластеров Цикл
		Команда = Новый Команда;
		Команда.УстановитьКоманду("""" + ПутьКRAC + """");
		Команда.ДобавитьПараметр("""" + ПараметрыЗапуска.АдресСервераАдминистрирования + """");
		Команда.ДобавитьПараметр("session");
		Команда.ДобавитьПараметр("--cluster=" + ТекКластер);
		Если ЗначениеЗаполнено(ПараметрыЗапуска.ИмяПользователяАдминистратораКластера) Тогда
			Команда.ДобавитьПараметр("--cluster-user=" + """" + ПараметрыЗапуска.ИмяПользователяАдминистратораКластера + """");
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыЗапуска.ПарольПользователяАдминистратораКластера) Тогда
			Команда.ДобавитьПараметр("--cluster-pwd=" + """" + ПараметрыЗапуска.ПарольПользователяАдминистратораКластера + """");
		КонецЕсли;
		Команда.ДобавитьПараметр("list");
		Команда.ДобавитьПараметр("--infobase=" + ИДБазы);
		КодВозврата = Команда.Исполнить();
		Вывод = Команда.ПолучитьВывод();
		Если КодВозврата = 0 Тогда
			ТекСоединение = "";
			ТекПроцесс = "";
			Для Каждого ТекСтрока Из СтрРазделить(Вывод, Символы.ПС) Цикл
				ТекПараметры = СтрРазделить(ТекСтрока, ":");
				Если ТекПараметры.Количество() = 2 Тогда			
							
					Если СокрЛП(ТекПараметры.Получить(0)) = "session" Тогда
						НСтрока = ТаблицаСеансов.Добавить();
						НСтрока.Сеанс = СокрЛП(ТекПараметры.Получить(1));
						НСтрока.Кластер = ТекКластер;
					ИначеЕсли СокрЛП(ТекПараметры.Получить(0)) = "process" Тогда
						НСтрока.Процесс = СокрЛП(ТекПараметры.Получить(1));
					ИначеЕсли СокрЛП(ТекПараметры.Получить(0)) = "connection" Тогда
						НСтрока.Соединение = СокрЛП(ТекПараметры.Получить(1));	
					ИначеЕсли СокрЛП(ТекПараметры.Получить(0)) = "infobase" Тогда
						НСтрока.База = СокрЛП(ТекПараметры.Получить(1));
					ИначеЕсли СокрЛП(ТекПараметры.Получить(0)) = "user-name" Тогда
						НСтрока.ИмяПользователя = СокрЛП(ТекПараметры.Получить(1));
					ИначеЕсли СокрЛП(ТекПараметры.Получить(0)) = "host" Тогда
						НСтрока.ИмяКомпьютера = СокрЛП(ТекПараметры.Получить(1));
					ИначеЕсли СокрЛП(ТекПараметры.Получить(0)) = "session-id" Тогда
						НСтрока.НомерСоединения = СокрЛП(ТекПараметры.Получить(1));		
					ИначеЕсли СокрЛП(ТекПараметры.Получить(0)) = "started-at" Тогда
						НСтрока.ВремяНачала = СокрЛП(ТекПараметры.Получить(1));	
					ИначеЕсли СокрЛП(ТекПараметры.Получить(0)) = "app-id" Тогда
						НСтрока.Приложение = СокрЛП(ТекПараметры.Получить(1));					
					Иначе
						Продолжить;
					КонецЕсли;

				КонецЕсли;
			КонецЦикла;

		Иначе
			ТекстОшибки = "Ошибка получения списка сеансов, код возврата = " + КодВозврата + Символы.ПС + Вывод;
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;

	Если РежимОтладки Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаСеансов Цикл
			Сообщить("	Получен сеанс: " + СтрокаТаблицы.Сеанс + ", кластер: " + СтрокаТаблицы.Кластер + ", процесс: " + СтрокаТаблицы.Процесс + ", соединение: " + СтрокаТаблицы.Соединение 
			+ ", база: " + СтрокаТаблицы.База + ", имя пользователя: " + СтрокаТаблицы.ИмяПользователя + ", имя компьютера: " + СтрокаТаблицы.ИмяКомпьютера 
			+ ", номер соединения: " + СтрокаТаблицы.НомерСоединения + ", время начала: " + СтрокаТаблицы.ВремяНачала + ", приложение: " + СтрокаТаблицы.Приложение);
		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицаСеансов;

КонецФункции

// *****************************************************************
Функция СА_ЗавершитьСеансы() Экспорт

	ПутьКRAC = СА_ПолучитьПутьКRAC();
	Если ПутьКRAC = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Получим сеансы
	ТаблицаСеансов = СА_ПолучитьСписокСеансов();
	Если ТаблицаСеансов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если РежимОтладки Тогда
		Сообщить("Завершаем сеансы:")
	КонецЕсли;
	
	ДопустимоеЧислоПопыток = 5;
	СчетчикПопыток = 0;
	Пока ТаблицаСеансов.Количество() > 0 Цикл

		Сеанс = ТаблицаСеансов.Получить(0);

		Команда = Новый Команда;
		Команда.УстановитьКоманду("""" + ПутьКRAC + """");
		Команда.ДобавитьПараметр("""" + ПараметрыЗапуска.АдресСервераАдминистрирования + """");
		Команда.ДобавитьПараметр("session");
		Команда.ДобавитьПараметр("--cluster=" + Сеанс.Кластер);
		Если ЗначениеЗаполнено(ПараметрыЗапуска.ИмяПользователяАдминистратораКластера) Тогда
			Команда.ДобавитьПараметр("--cluster-user=" + """" + ПараметрыЗапуска.ИмяПользователяАдминистратораКластера + """");
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыЗапуска.ПарольПользователяАдминистратораКластера) Тогда
			Команда.ДобавитьПараметр("--cluster-pwd=" + """" + ПараметрыЗапуска.ПарольПользователяАдминистратораКластера + """");
		КонецЕсли;
		Команда.ДобавитьПараметр("terminate");
		Команда.ДобавитьПараметр("--session=" + Сеанс.Сеанс);
		КодВозврата = Команда.Исполнить();
		Вывод = Команда.ПолучитьВывод();
		Если КодВозврата <> 0 Тогда
			// Сеанс уже может не существовать на сервере
			// или его не удается завершить с первого раза
			Если СчетчикПопыток = ДопустимоеЧислоПопыток Тогда				
				ТекстОшибки = "Ошибка завершения сеансов, код возврата = " + КодВозврата + Символы.ПС + Вывод;
				Возврат Ложь;
			Иначе
				СчетчикПопыток = СчетчикПопыток + 1;
				Если РежимОтладки Тогда
					Сообщить("	Сеанс: " + Сеанс.Сеанс + " завершить не удалось!" + Символы.ПС + Вывод);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если РежимОтладки Тогда
				Сообщить("	Сеанс: " + Сеанс.Сеанс + " завершен!");
			КонецЕсли;
		КонецЕсли;		

		// Получим сеансы снова, т. к. могли появиться новые сеансы или отвалиться старые
		ТаблицаСеансов = СА_ПолучитьСписокСеансов();
		Если ТаблицаСеансов = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

	КонецЦикла;

	Если РежимОтладки Тогда
		Сообщить("	УСПЕШНО")
	КонецЕсли;

	Возврат Истина;

КонецФункции

// *****************************************************************
Функция СА_ИзменитьБлокировкуНачалаСеансов(Флаг = Истина, МинутОжиданияЗавершенияСеансов = 0) Экспорт

	ПутьКRAC = СА_ПолучитьПутьКRAC();
	Если ПутьКRAC = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	МассивКластеров = СА_ПолучитьСписокКластеров();
	Если МассивКластеров = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ИДБазы = СА_ПолучитьИДБазыПоИмени();
	Если ИДБазы = "" Или ИДБазы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Для Каждого ТекКластер Из МассивКластеров Цикл
		Команда = Новый Команда;
		Команда.УстановитьКоманду("""" + ПутьКRAC + """");
		Команда.ДобавитьПараметр("""" + ПараметрыЗапуска.АдресСервераАдминистрирования + """");
		Команда.ДобавитьПараметр("infobase");
		Команда.ДобавитьПараметр("--cluster=" + ТекКластер);
		Если ЗначениеЗаполнено(ПараметрыЗапуска.ИмяПользователяАдминистратораКластера) Тогда
			Команда.ДобавитьПараметр("--cluster-user=" + """" + ПараметрыЗапуска.ИмяПользователяАдминистратораКластера + """");
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыЗапуска.ПарольПользователяАдминистратораКластера) Тогда
			Команда.ДобавитьПараметр("--cluster-pwd=" + """" + ПараметрыЗапуска.ПарольПользователяАдминистратораКластера + """");
		КонецЕсли;
		Команда.ДобавитьПараметр("update");
		Команда.ДобавитьПараметр("--infobase=" + ИДБазы);
		Команда.ДобавитьПараметр("--infobase-user=" + ПараметрыЗапуска.ИмяПользователя);
		Команда.ДобавитьПараметр("--infobase-pwd=" + ПараметрыЗапуска.ПарольПользователя);
		Если Флаг = Истина Тогда
			СтрокаДата = Формат(ТекущаяДата() + 60 * МинутОжиданияЗавершенияСеансов, "ДФ='yyyy-MM-ddTHH:mm:ss'");
			Команда.ДобавитьПараметр("--denied-from=" + """" + СтрокаДата + """");
			Команда.ДобавитьПараметр("--denied-message=" + """" + ПараметрыЗапуска.СообщениеПриБлокировке + """");
			Команда.ДобавитьПараметр("--permission-code=" + ПараметрыЗапуска.КодРазрешения);
			Команда.ДобавитьПараметр("--sessions-deny=" + "on");
		Иначе
			Команда.ДобавитьПараметр("--denied-from=" + """0001-01-01""");
			Команда.ДобавитьПараметр("--sessions-deny=" + "off");
		КонецЕсли;
		КодВозврата = Команда.Исполнить();
		Вывод = Команда.ПолучитьВывод();
		Если КодВозврата <> 0 Тогда
			ТекстОшибки = "Ошибка " + ?(Флаг, "установки", "снятия") + " блокировки начала сеансов, код возврата = " + КодВозврата + Символы.ПС + Вывод;
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;

КонецФункции

// *****************************************************************
Функция СА_ИзменитьБлокировкуРегламентныхЗаданий(Флаг = Истина) Экспорт

	ПутьКRAC = СА_ПолучитьПутьКRAC();
	Если ПутьКRAC = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	МассивКластеров = СА_ПолучитьСписокКластеров();
	Если МассивКластеров = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ИДБазы = СА_ПолучитьИДБазыПоИмени();
	Если ИДБазы = "" Или ИДБазы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Для Каждого ТекКластер Из МассивКластеров Цикл
		Команда = Новый Команда;
		Команда.УстановитьКоманду("""" + ПутьКRAC + """");
		Команда.ДобавитьПараметр("""" + ПараметрыЗапуска.АдресСервераАдминистрирования + """");
		Команда.ДобавитьПараметр("infobase");
		Команда.ДобавитьПараметр("--cluster=" + ТекКластер);
		Если ЗначениеЗаполнено(ПараметрыЗапуска.ИмяПользователяАдминистратораКластера) Тогда
			Команда.ДобавитьПараметр("--cluster-user=" + """" + ПараметрыЗапуска.ИмяПользователяАдминистратораКластера + """");
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыЗапуска.ПарольПользователяАдминистратораКластера) Тогда
			Команда.ДобавитьПараметр("--cluster-pwd=" + """" + ПараметрыЗапуска.ПарольПользователяАдминистратораКластера + """");
		КонецЕсли;
		Команда.ДобавитьПараметр("update");
		Команда.ДобавитьПараметр("--infobase=" + ИДБазы);
		Команда.ДобавитьПараметр("--infobase-user=" + ПараметрыЗапуска.ИмяПользователя);
		Команда.ДобавитьПараметр("--infobase-pwd=" + ПараметрыЗапуска.ПарольПользователя);
		Команда.ДобавитьПараметр("--scheduled-jobs-deny=" + ?(Флаг, "on", "off"));
		КодВозврата = Команда.Исполнить();
		Вывод = Команда.ПолучитьВывод();
		Если КодВозврата <> 0 Тогда
			ТекстОшибки = "Ошибка " + ?(Флаг, "установки", "снятия") + " блокировки начала сеансов, код возврата = " + КодВозврата + Символы.ПС + Вывод;
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;

КонецФункции

// *****************************************************************
Функция СА_ПолучитьДанныеИнформационнойБазы() Экспорт

	ПутьКRAC = СА_ПолучитьПутьКRAC();
	Если ПутьКRAC = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивКластеров = СА_ПолучитьСписокКластеров();
	Если МассивКластеров = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИДБазы = СА_ПолучитьИДБазыПоИмени();
	Если ИДБазы = "" Или ИДБазы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ДанныеИнформационнойБазы = Новый Структура;

	Для Каждого ТекКластер Из МассивКластеров Цикл
		Команда = Новый Команда;
		Команда.УстановитьКоманду("""" + ПутьКRAC + """");
		Команда.ДобавитьПараметр("""" + ПараметрыЗапуска.АдресСервераАдминистрирования + """");
		Команда.ДобавитьПараметр("infobase");
		Команда.ДобавитьПараметр("--cluster=" + ТекКластер);
		Если ЗначениеЗаполнено(ПараметрыЗапуска.ИмяПользователяАдминистратораКластера) Тогда
			Команда.ДобавитьПараметр("--cluster-user=" + """" + ПараметрыЗапуска.ИмяПользователяАдминистратораКластера + """");
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыЗапуска.ПарольПользователяАдминистратораКластера) Тогда
			Команда.ДобавитьПараметр("--cluster-pwd=" + """" + ПараметрыЗапуска.ПарольПользователяАдминистратораКластера + """");
		КонецЕсли;
		Команда.ДобавитьПараметр("info");
		Команда.ДобавитьПараметр("--infobase=" + ИДБазы);
		Команда.ДобавитьПараметр("--infobase-user=" + ПараметрыЗапуска.ИмяПользователя);
		Команда.ДобавитьПараметр("--infobase-pwd=" + ПараметрыЗапуска.ПарольПользователя);
		КодВозврата = Команда.Исполнить();
		Вывод = Команда.ПолучитьВывод();
		Если КодВозврата = 0 Тогда
			Для Каждого ТекСтрока Из СтрРазделить(Вывод, Символы.ПС) Цикл
				ТекПараметры = СтрРазделить(ТекСтрока, ":");
				Если ТекПараметры.Количество() = 2 Тогда
					
					ТекИмя = СокрЛП(ТекПараметры.Получить(0));
					ТекЗначение = СокрЛП(ТекПараметры.Получить(1));

					Если Не ПустаяСтрока(ТекИмя) Тогда
						ДанныеИнформационнойБазы.Вставить(СтрЗаменить(ТекИмя, "-", ""), ТекЗначение);
					КонецЕсли;

				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекстОшибки = "Ошибка получения данных информационной базы, код возврата = " + КодВозврата + Символы.ПС + Вывод;
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;

	Если ДанныеИнформационнойБазы.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат ДанныеИнформационнойБазы;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область Запуск1С

// *****************************************************************
// Запускает 1С:Предприятие
//
// Параметры:
//	ПутьКОбработке - Строка - Если указан путь к обработке, то обработка будет открыта после запуска 1С:Предприятие
//	ОжидатьЗавершения - Булево - Ожидать завершения работы 1С:Предприятие, по умолчанию - Ложь
//	ДопПараметрыЗапуска - Строка - Дополнительные параметры запуска
//	ТонкийКлиент - Булево - Если значение = Истина, то будет запускаться тонкий клиент, по умолчанию - Ложь
//
Функция ЗапуститьПредприятие(ПутьКОбработке = "", ОжидатьЗавершения = Ложь, ДопПараметрыЗапуска = "", ТонкийКлиент = Ложь) Экспорт

	СтрокаЗапуска = 		
		?(ПутьКОбработке = "" , "", ВставитьПараметрЗапуска(ПутьКОбработке, "Execute")) +
		ДопПараметрыЗапуска;

	Возврат ВыполнитьЗапуск1С("ENTERPRISE", СтрокаЗапуска, ОжидатьЗавершения, ТонкийКлиент);

КонецФункции

// *****************************************************************
// Запускает конфигуратор
//
// Параметры:
//	ОжидатьЗавершения - Булево - Ожидать завершения работы конфигуратора, по умолчанию - Ложь
//
Функция ЗапуститьКонфигуратор(ОжидатьЗавершения = Ложь) Экспорт

	Возврат ВыполнитьЗапуск1С("DESIGNER", "", ОжидатьЗавершения);

КонецФункции

#КонецОбласти

#Область ВыгрузкаЗагрузкаИБ

// *****************************************************************
// Выгружает информационную базу в указанный файл (dt)
//
// Параметры:
//	ПолныйПутьКФайлу - Строка - Полный путь к файлу
//	
Функция ВыгрузитьИнформационнуюБазу(ПолныйПутьКФайлу) Экспорт

	СтрокаЗапуска = ВставитьПараметрЗапуска(ПолныйПутьКФайлу, "DumpIB ");

	Если НЕ ВыполнитьЗапуск1С("DESIGNER", СтрокаЗапуска) Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверим, создался ли файл?
	Если НайтиФайлы(ПолныйПутьКФайлу).Количество() = 0 Тогда
		ТекстОшибки = "Команда выполнена успешно, но файл не найден после завершения.";
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина; 

КонецФункции

// *****************************************************************
// Загружает информационную базу из указанного файла (dt)
//
// Параметры:
//	ПолныйПутьКФайлу - Строка - Полный путь к файлу
//
Функция ЗагрузитьИнформационнуюБазу(ПолныйПутьКФайлу) Экспорт

	СтрокаЗапуска = ВставитьПараметрЗапуска(ПолныйПутьКФайлу, "RestoreIB ");

	Возврат ВыполнитьЗапуск1С("DESIGNER", СтрокаЗапуска);
	
КонецФункции

#КонецОбласти

#Область Конфигурация

// *****************************************************************
// Сохраняет текущую конфигурацию в указаннй файл (cf)
//
// Параметры:
//	ПолныйПутьКФайлу - Строка - Полный путь к файлу
//
Функция СохранитьКонфигурациюВФайл(ПолныйПутьКФайлу) Экспорт

	// Удалим файл, если таковой имеется
	УдалитьФайлы(ПолныйПутьКФайлу);

	СтрокаЗапуска = ВставитьПараметрЗапуска(ПолныйПутьКФайлу, "DumpCfg ");

	Если НЕ ВыполнитьЗапуск1С("DESIGNER", СтрокаЗапуска) Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверим, создался ли файл?
	Если НайтиФайлы(ПолныйПутьКФайлу).Количество() = 0 Тогда
		ТекстОшибки = "Команда выполнена успешно, но файл не найден после завершения.";
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина; 

КонецФункции

// *****************************************************************
// Сохраняет конфигурацию базы данных в указаннй файл (cf)
//
// Параметры:
//	ПолныйПутьКФайлу - Строка - Полный путь к файлу
//
Функция СохранитьКонфигурациюБазыДанныхВФайл(ПолныйПутьКФайлу) Экспорт

	СтрокаЗапуска = ВставитьПараметрЗапуска(ПолныйПутьКФайлу, "DumpDBCfg ");

	Если НЕ ВыполнитьЗапуск1С("DESIGNER", СтрокаЗапуска) Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверим, создался ли файл?
	Если НайтиФайлы(ПолныйПутьКФайлу).Количество() = 0 Тогда
		ТекстОшибки = "Команда выполнена успешно, но файл не найден после завершения.";
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина; 
   
КонецФункции

// *****************************************************************
// Загружает конфигурацию из указанного файла (cf)
//
// Параметры:
//	ПолныйПутьКФайлу - Строка - Полный путь к файлу
//
Функция ЗагрузитьКонфигурациюИзФайла(ПолныйПутьКФайлу, ИмяРасширения = "") Экспорт

	СтрокаЗапуска = ВставитьПараметрЗапуска(ПолныйПутьКФайлу, "LoadCfg ") +
		?(ЗначениеЗаполнено(ИмяРасширения), "-Extension " + ИмяРасширения + "", "");	

	Возврат ВыполнитьЗапуск1С("DESIGNER", СтрокаЗапуска);

КонецФункции

// *****************************************************************
// Обновлет конфигурацию базы данных
// 
// Параметры:
//	ПредупрежденияКакОшибки - Булево - Если Истина, то все предупреждения трактуются как ошибки.
//	НаСервере - Булево - Если Истина, то обновление будет выполняться на сервере (имеет смысл только в клиент-серверном варианте работы).
//	
Функция ОбновитьКонфигурациюБазыДанных(ПредупрежденияКакОшибки = Ложь, НаСервере = Ложь) Экспорт

	СтрокаЗапуска = "/UpdateDBCfg " +
		?(ПредупрежденияКакОшибки, "-WarningsAsErrors ", "") +
		?(НаСервере, "-Server ", "");
 
	Возврат ВыполнитьЗапуск1С("DESIGNER", СтрокаЗапуска);
	
КонецФункции

// **********************************************************************************************
// Сравнивает две конфигурации с выводом отчета в файл
//
// Параметры:
//	ПутьИмяФайлаОтчета - путь к файлу отчета, если файл не существует, будет создан новый;
//	ТипПервойКонфигурации - Строка - Тип первой конфигурации. Возможные значния:
// 		MainConfiguration - основная конфигурация;
// 		DBConfiguration - конфигурация базы данных;
// 		VendorConfiguration - конфигурация поставщика;
// 		ExtensionConfiguration - расширение конфигурации;
// 		ExtensionDBConfiguration - расширение конфигурации из база данных;
// 		ConfigurationRepository - конфигурация из хранилища конфигурации;
//		File - файл конфигурации/расширения конфигурации.	
//	ТипВторойКонфигурации - Строка - Тип второй конфигурации. Возможные значения:
// 		MainConfiguration - основная конфигурация;
// 		DBConfiguration - конфигурация базы данных;
// 		VendorConfiguration - конфигурация поставщика;
// 		ExtensionConfiguration - расширение конфигурации;
// 		ExtensionDBConfiguration - расширение конфигурации из база данных;
// 		ConfigurationRepository - конфигурация из хранилища конфигурации;
//		File - файл конфигурации/расширения конфигурации.
//	ДопКлючПервойКонфигурации - Строка - дополнительный идентификатор первой конфигурации. Возможные значения (в зависимости от типа первой конфигурации):
//		MainConfiguration - Не используется
//		DBConfiguration - Не используется
//		VendorConfiguration - Имя конфигурации поставщика
//		ExtensionConfiguration - Имя конфигурации поставщика
//		ExtensionDBConfiguration - Имя конфигурации расширения (из базы данных)
//		ConfigurationRepository - Версия конфигурации в хранилище
//		File - Пусть к файлу конфигурации (.cf-файл) или расширения конфигурации (.cfe-файл)
//	ДопКлючВторойКонфигурации - Строка - дополнительный идентификатор второй конфигурации. Возможные значения (в зависимости от типа второй конфигурации):
//		MainConfiguration - Не используется
//		DBConfiguration - Не используется
//		VendorConfiguration - Имя конфигурации поставщика
//		ExtensionConfiguration - Имя конфигурации поставщика
//		ExtensionDBConfiguration - Имя конфигурации расширения (из базы данных)
//		ConfigurationRepository - Версия конфигурации в хранилище
//		File - Пусть к файлу конфигурации (.cf-файл) или расширения конфигурации (.cfe-файл)
//	ТипОтчетаДляСравнения - Строка - Тип отчета для сравнения. Возможные типы:
//		Brief - крайткий отчет;
//		Full - полный отчет.
//	ФорматФайлаОтчета - Строка - Формат файла отчета. Возможные значения:
//		txt - текстовый документ;
//		mxl - табличный документ.
//	ПравилоУстановкиСоответствийОбъектов - Строка - для тех случаев, когда конфигурации не состоят в отношениях «родитель-потомок», возможные значения:
//		ByObjectName - по именам объектов. Используется по умолчанию.
//		ByObjectIDs - по внутренним идентификаторам.
//	
// Возвращает:
//		Истина - Отчет сформирован успешно
//		Ложь - Были ошибки
//
Функция СравнитьКонфигурации(
	ПутьИмяФайлаОтчета,
	ТипПервойКонфигурации = "MainConfiguration",
	ТипВторойКонфигурации = "DBConfiguration",
	Знач ДопКлючПервойКонфигурации = "",
	Знач ДопКлючВторойКонфигурации = "",
	ТипОтчетаДляСравнения = "Brief",
	ФорматФайлаОтчета = "txt",	
	ПравилоУстановкиСоответствийОбъектов = "ByObjectName") Экспорт

	// Доработаем и проверим параметры запуска
	Если ТипПервойКонфигурации = "ConfigurationRepository" Тогда
		Если ДопКлючПервойКонфигурации = "" Тогда
			ДопКлючПервойКонфигурации = "0 ";
		КонецЕсли;
	ИначеЕсли ТипПервойКонфигурации = "File" Тогда
		Файл = Новый Файл(ДопКлючПервойКонфигурации);
		Если Не Файл.Существует() Тогда
			ТекстОшибки = "Не найден файл по пути: " + ДопКлючПервойКонфигурации;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ТипВторойКонфигурации = "ConfigurationRepository" Тогда
		Если ДопКлючВторойКонфигурации = "" Тогда
			ДопКлючВторойКонфигурации = "0 ";
		КонецЕсли;
	ИначеЕсли ТипВторойКонфигурации = "File" Тогда
		Файл = Новый Файл(ДопКлючВторойКонфигурации);
		Если Не Файл.Существует() Тогда
			ТекстОшибки = "Не найден файл по пути: " + ДопКлючВторойКонфигурации;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	СтрокаЗапуска =	"/CompareCfg " + 			
		ВставитьПараметрЗапуска(ТипПервойКонфигурации, "FirstConfigurationType ", "-", Ложь) +
		?(Найти("MainConfigurationDBConfiguration",ТипПервойКонфигурации) = 0, "-FirstConfigurationKey " + ДопКлючПервойКонфигурации,"") +
		ВставитьПараметрЗапуска(ТипВторойКонфигурации, "SecondConfigurationType ", "-", Ложь) +
		?(Найти("MainConfigurationDBConfiguration",ТипВторойКонфигурации) = 0, "-SecondConfigurationKey " + ДопКлючВторойКонфигурации,"") +		
		?(ПравилоУстановкиСоответствийОбъектов <> "", ВставитьПараметрЗапуска(ПравилоУстановкиСоответствийОбъектов,"MappingRule ","-",Ложь),"") + 
		"-IncludeChangedObjects -IncludeDeletedObjects -IncludeAddedObjects " +
		ВставитьПараметрЗапуска(ТипОтчетаДляСравнения, "ReportType ", "-", Ложь) +
		ВставитьПараметрЗапуска(ФорматФайлаОтчета, "ReportFormat ", "-", Ложь) +			
		ВставитьПараметрЗапуска(ПутьИмяФайлаОтчета, "ReportFile ", "-");
 
	Возврат ВыполнитьЗапуск1С("DESIGNER", СтрокаЗапуска);

КонецФункции

// *****************************************************************
// Проверяет есть ли записи об изменении в файле отчета о сравнении конфигураций.
// При условии, что отчет "краткий" в формате txt.
//
// Параметры:
//		ПутьКФайлуОтчетаОСравнении - Путь к файлу отчета о сравнении
//
// Возвращает:
//		Истина - Есть изменения
//		Ложь - Изменений нет
//		Неопределено - Были ошибки
//
Функция ЕстьИзмененияВОтчетеОСравненииКраткийТекст(ПутьКФайлуОтчетаОСравнении) Экспорт

	// Проверим существование файла
	Файл = Новый Файл(ПутьКФайлуОтчетаОСравнении);
	Если Не Файл.Существует() Тогда
		ТекстОшибки = "Файл " + ПутьКФайлуОтчетаОСравнении + " не найден!";
		Возврат Неопределено;
	КонецЕсли;

	ЧислоСтрокВЗаголовке = 4;
	
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуОтчетаОСравнении);
	Стр = ЧтениеТекста.ПрочитатьСтроку();
	ПрочитаноСтрок = 0;
	Пока Стр <> Неопределено Цикл
		Если СокрЛП(Стр) <> "" Тогда
			ПрочитаноСтрок = ПрочитаноСтрок + 1;
		КонецЕсли;
		Если ПрочитаноСтрок > ЧислоСтрокВЗаголовке Тогда
			ЧтениеТекста.Закрыть();
			Возврат Истина;
		КонецЕсли;
		Стр = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;
	ЧтениеТекста.Закрыть();
	
	Возврат Ложь;
	
КонецФункции

// *****************************************************************
//	Проверяет, если ли изменения в основной конфигурации относительно конфигурации базы данных
//		
// Возвращает:
//		Истина - Есть изменения
//		Ложь - Изменений нет
//		Неопределено - Были ошибки
// 
Функция ЕстьИзмененияОсновнойКонфигурации() Экспорт

	// Создадим отчет о сравнении
	ВременныйФайлСравнения = ПолучитьИмяВременногоФайла("txt");
	Если Не СравнитьКонфигурации(ВременныйФайлСравнения, "MainConfiguration", "DBConfiguration") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЕстьИзменения = ЕстьИзмененияВОтчетеОСравненииКраткийТекст(ВременныйФайлСравнения);
	
	// Удалим временный файл
	УдалитьФайлы(ВременныйФайлСравнения);
	
	Возврат ЕстьИзменения;

КонецФункции

// *****************************************************************
Функция ОбъединитьКонфигурациюСФайлом(ПолныйПутьКФайлуКонфигурации, ПолныйПутьКФайлуНастроек = "") Экспорт

	// Проверим, есть ли файл?
	Если НайтиФайлы(ПолныйПутьКФайлуКонфигурации).Количество() = 0 Тогда
		ТекстОшибки = "Не найден файл по пути: " + ПолныйПутьКФайлуКонфигурации;
		Возврат Ложь;
	КонецЕсли;

	Если ПолныйПутьКФайлуНастроек <> "" Тогда
		Если НайтиФайлы(ПолныйПутьКФайлуКонфигурации).Количество() = 0 Тогда
			ТекстОшибки = "Не найден файл по пути: " + ПолныйПутьКФайлуНастроек;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	СтрокаЗапуска = ВставитьПараметрЗапуска(ПолныйПутьКФайлуКонфигурации, "MergeCfg ") +			
		?(ПолныйПутьКФайлуНастроек = "", "", ВставитьПараметрЗапуска(ПолныйПутьКФайлуНастроек, "Settings ", "-")) + 
		"-ClearUnresolvedRefs " +
		"-force ";

	Возврат ВыполнитьЗапуск1С("DESIGNER", СтрокаЗапуска);

КонецФункции

#КонецОбласти

#Область ХранилищеКонфигураций

// *****************************************************************
//	Проверяет, если ли изменения в хранилище относительно основной конфигурации
//		
// Возвращает:
//		Истина - Есть изменения
//		Ложь - Изменений нет
//		Неопределено - Были ошибки
// 
Функция ЕстьИзмененияВХранилище() Экспорт

	// Создадим отчет о сравнении
	ВременныйФайлСравнения = ПолучитьИмяВременногоФайла("txt");
	Если Не СравнитьКонфигурации(ВременныйФайлСравнения, "MainConfiguration","ConfigurationRepository") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЕстьИзменения = ЕстьИзмененияВОтчетеОСравненииКраткийТекст(ВременныйФайлСравнения);
	
	// Удалим временный файл
	УдалитьФайлы(ВременныйФайлСравнения);
	
	Возврат ЕстьИзменения;

КонецФункции

// *****************************************************************
// Сохраняет конфигурацию из хранилища в файл
//
// Параметры:
//  ПолныйПутьКФайлу - Полный путь к файлу	
// 	НомерВерсии - номер версии хранилища, если номер версии не указан, или равен -1, будет сохранена последняя версия.
//
Функция СохранитьКонфигурациюИзХранилищаВФайл(ПолныйПутьКФайлу, НомерВерсии = "") Экспорт

	// Удалим файл, если таковой имеется
	УдалитьФайлы(ПолныйПутьКФайлу);

	СтрокаЗапуска = ВставитьПараметрЗапуска(ПолныйПутьКФайлу, "ConfigurationRepositoryDumpCfg ") + 
		?(ЗначениеЗаполнено(НомерВерсии), "-v " + Формат(НомерВерсии, "ЧДЦ=0; ЧГ=0") + " ", "");

	Если НЕ ВыполнитьЗапуск1С("DESIGNER", СтрокаЗапуска) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим, создался ли файл?
	Если НайтиФайлы(ПолныйПутьКФайлу).Количество() = 0 Тогда
		ТекстОшибки = "Команда выполнена успешно, но файл не найден после завершения.";
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина; 
   
КонецФункции

// *****************************************************************
// Обновляет текущую конфигурацию из хранилища
//
// Параметры:
// 	НомерВерсии (-v [номер версии хранилища]) 
//		- номер версии хранилища, если номер версии не указан, или равен -1, будет сохранена последняя версия, если конфигурация не подключена к хранилищу, то параметр игнорируется;
// 	ПолучатьЗахваченныеОбъекты (-revised) 
//		- получать захваченные объекты, если потребуется. Если конфигурация не подключена к хранилищу, то параметр игнорируется;
// 	Форсировать (-force)
//		- если при пакетном обновлении конфигурации из хранилища должны быть получены новые объекты конфигурации или удалиться существующие, указание этого параметра 
//			свидетельствует о подтверждении пользователем описанных выше операций. Если параметр не указан - действия выполнены не будут.
//
Функция ОбновитьКонфигурациюИзХранилища(НомерВерсии = "", ПолучатьЗахваченныеОбъекты = Ложь, Форсировать = Истина) Экспорт

	СтрокаЗапуска = "/ConfigurationRepositoryUpdateCfg " +
		?(ЗначениеЗаполнено(НомерВерсии), "-v " + Формат(НомерВерсии, "ЧДЦ=0; ЧГ=0") + " ", "") +
		?(ПолучатьЗахваченныеОбъекты, "-revised ","") +
		?(Форсировать, "-force ", "");
 
	Возврат ВыполнитьЗапуск1С("DESIGNER", СтрокаЗапуска);
	
КонецФункции

// *****************************************************************
// Отключает конфигурацию от хранилища
//
// Параметры:
// 	Форсировать (-force) Булево - ключ для форсирования отключения от хранилища (пропуск диалога аутентификации, если не указаны параметры пользователя хранилища, игнорирование наличия захваченных и измененных объектов).
//
// Возващает:
//	Истина - Операция успешно выполнена
//	Ложь - Были ошибки
//
Функция ОтключитьКонфигурациюОтХранилища(Форсировать = Истина) Экспорт

	СтрокаЗапуска = "/ConfigurationRepositoryUnbindCfg " +
		?(Форсировать,"-force ","");

	Возврат ВыполнитьЗапуск1С("DESIGNER", СтрокаЗапуска);
	
КонецФункции

// *****************************************************************
// Подключает конфигурацию к хранилищу
//
// Параметры:
// 	Форсировать (-force) - Булево - выполняет подключение даже в том случае, если для данного пользователя уже есть конфигурация, связанная с данным хранилищем.
//	ЗаменитьТекущуюКонфигурацию - Булево - если конфигурация непустая, данный ключ подтверждает замену конфигурации на конфигурацию из хранилища.
//
// Возващает:
//	Истина - Операция успешно выполнена
//	Ложь - Были ошибки
//
Функция ПодключитьКонфигурациюКХранилищу(Форсировать = Истина, ЗаменитьТекущуюКонфигурацию = Истина) Экспорт

	СтрокаЗапуска = "/ConfigurationRepositoryBindCfg " +
		?(Форсировать, "-forceBindAlreadyBindedUser ", "") +
		?(ЗаменитьТекущуюКонфигурацию, "-forceReplaceCfg ", "");

	Возврат ВыполнитьЗапуск1С("DESIGNER", СтрокаЗапуска);	
	
КонецФункции

// *****************************************************************
// Выполняет очистку локального кэша хранилища конфигурации
//
// Возващает:
//	Истина - Операция успешно выполнена
//	Ложь - Были ошибки
//
Функция ВыполнитьОчисткуЛокальногоКешаХранилища() Экспорт

	СтрокаЗапуска = "/ConfigurationRepositoryClearLocalCache ";

	Возврат ВыполнитьЗапуск1С("DESIGNER", СтрокаЗапуска);	

КонецФункции

// *****************************************************************
// Выполняет очистку локальной базы данных хранилища конфигурации
//
// Параметры:
//
// Возващает:
//	Истина - Операция успешно выполнена
//	Ложь - Были ошибки
//
Функция ВыполнитьОчисткуЛокальнойБазыДанныхХранилища() Экспорт

	СтрокаЗапуска = "/ConfigurationRepositoryClearCache ";

	Возврат ВыполнитьЗапуск1С("DESIGNER", СтрокаЗапуска);

КонецФункции

// *****************************************************************
// Выполняет захват объектов из хранилища конфигурации для редактирования (/ConfigurationRepositoryLock [-Objects <имя файла>] [-revised]).
//
// Параметры:
//	ПутьИмяФайлаОбъектов (-Objects <имя файла>)
//		- путь к файлу со списком объектов, которые будут участвовать в операции. Если файл указан - в операции участвуют только указанные в файле объекты, в противном случае участвует вся конфигурация.
//	ПолучатьОбъектыИзХранилища(-revised)
//		- получать захваченные объекты, если потребуется.
// Возвращает:
//		Истина	- операция выполнена успешно;
//		Ложь	- были ошибки.
//
Функция ЗахватитьВХранилище(ПутьИмяФайлаОбъектов = "", ПолучатьОбъектыИзХранилища = Истина) Экспорт

	СтрокаЗапуска = 
			"/ConfigurationRepositoryLock " +
			?(ПутьИмяФайлаОбъектов<>"",ВставитьПараметрЗапуска(ПутьИмяФайлаОбъектов,"Objects ","-"),"") + 
			?(ПолучатьОбъектыИзХранилища,"-revised ","") +
			?(ЗначениеЗаполнено(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме),
				ВставитьПараметрЗапуска(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме,"DumpResult "),"");

	Возврат ВыполнитьЗапуск1С("DESIGNER", СтрокаЗапуска);
	
КонецФункции

// *********************************************************************
// Выполняет отмену захвата объектов в хранилище конфигурации (/ConfigurationRepositoryUnLock [-Objects <имя файла>] [-force]).
//
// Параметры:
//	ПутьИмяФайлаОбъектов (-Objects <имя файла>)
//		- путь к файлу со списком объектов, которые будут участвовать в операции. Если файл указан - в операции участвуют только указанные в файле объекты, в противном случае участвует вся конфигурация.
//	ОтменитьЛокальныеИзменения(-force)
//		- описывает поведение с локально измененными объектами:
//			Ключ указан - локально измененные объекты будут получены из хранилища. Изменения будут потеряны.
//			Ключ не указан - при наличии локально измененных объектов будет выдана ошибка, и операция будет отменена целиком, для всех объектов, участвующих в операции.
// Возвращает:
//		Истина	- операция выполнена успешно;
//		Ложь	- были ошибки.
//	
Функция ОтменитьЗахватВХранилище(ПутьИмяФайлаОбъектов = "", ОтменитьЛокальныеИзменения = Истина) Экспорт

	СтрокаЗапуска = "/ConfigurationRepositoryUnLock " +
		?(ПутьИмяФайлаОбъектов <> "", ВставитьПараметрЗапуска(ПутьИмяФайлаОбъектов, "Objects ", "-"), "") + 
		?(ОтменитьЛокальныеИзменения, "-force ", "");
	
	Возврат ВыполнитьЗапуск1С("DESIGNER", СтрокаЗапуска);

КонецФункции

// *******************************************************************
// Помещает измененные объекты в хранилище (/ConfigurationRepositoryCommit [-Objects <имя файла>] [-comment <текст комментария>] [-keepLocked] [-force])
//		 
// Параметры:
// 	ПутьИмяФайлаОбъектов (-Objects <имя файла>)
//		- путь к файлу со списком объектов, которые будут участвовать в операции. Если файл указан - в операции участвуют только указанные в файле объекты, в противном случае участвует вся конфигурация.
//	ТекстКомментария (-comment <текст комментария>)
//		- текст комментария к помещаемым объектам.
//	ОставлятьОбъектыЗахваченными (-keepLocked)
//		- оставлять помещенные объекты захваченными. Если не указан, то после помещения изменений будет отменен захват для объектов, участвующих в операции.
//	ОчищатьСсылкиНаУдаленныеОбъекты (-force)
//		- описывает поведение при обнаружении ссылок на удаленные объекты:
//			Истина - будет выполнена попытка очистки ссылок.
//			Ложь - будет выдана ошибка.
// Возвращает:
//		Истина	- операция выполнена успешно;
//		Ложь	- были ошибки.
//
Функция ПоместитьВХранилище(ПутьИмяФайлаОбъектов = "", ТекстКомментария = "", ОставлятьОбъектыЗахваченными = Ложь, ОчищатьСсылкиНаУдаленныеОбъекты = Истина) Экспорт

	СтрокаЗапуска =	"/ConfigurationRepositoryCommit " +
		?(ПутьИмяФайлаОбъектов <> "", ВставитьПараметрЗапуска(ПутьИмяФайлаОбъектов, "Objects ", "-"),"") + 
		ВставитьПараметрЗапуска(ТекстКомментария,"comment ", "-") +			
		?(ОставлятьОбъектыЗахваченными, "-keepLocked ", "") +
		?(ОчищатьСсылкиНаУдаленныеОбъекты, "-force ", "");
		
	Возврат ВыполнитьЗапуск1С("DESIGNER", СтрокаЗапуска);

КонецФункции

// *****************************************************************
Функция ПолучитьИсториюХранилища(ПутьИмяФайлаОбъектов = "", НачальнаяВерсия = -1, КонечнаяВерсия = -1, Формат = "txt") Экспорт

	СтрокаЗапуска = "/ConfigurationRepositoryReport " +
		ПутьИмяФайлаОбъектов + " " + 
		ВставитьПараметрЗапуска(НачальнаяВерсия, "NBegin ", "-", Ложь) + 
		?(КонечнаяВерсия=-1,"",ВставитьПараметрЗапуска(КонечнаяВерсия, "NEnd ", "-", Ложь)) + 
		ВставитьПараметрЗапуска(Формат, "ReportFormat ", "-", Ложь);		
		
	Возврат ВыполнитьЗапуск1С("DESIGNER", СтрокаЗапуска);

КонецФункции

#КонецОбласти

#Область СлужебныеФайлы

// *****************************************************************
// Создает файл списка объектов на основании отчета о сравнении
//
// Параметры:
//	ПолныйПутьКФайлуОтчета - полный путь к файлу отчета о сравнении (отчет должен быть кратким в формате txt) 
//	ПолныйПутьКФайлуСпискаОбъектов - полный путь к файлу списка объектов, если путь не указан, будет создан временный.
//
// Возвращает:
//		Ложь 		- Были ошибки;
//		Истина		- Файл создан успешно.
//
Функция СоздатьФайлДляЗахватаОбъектовИзОтчетаОСравнении(ПолныйПутьКФайлуОтчета="", ПолныйПутьКФайлуСпискаОбъектов="") Экспорт
	
	// Читаем файл отчета о сравнении
	Если ПолныйПутьКФайлуОтчета = "" Тогда
		ТекстОшибки = "Не верное количество параметров. Не указан путь к файлу отчета о сравнении!";
		Возврат Ложь;		
	КонецЕсли;
	Текст = Новый ТекстовыйДокумент; 
    Попытка
		Текст.Прочитать(ПолныйПутьКФайлуОтчета); 
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;		
	КонецПопытки;

	// Создаем массив объектов из файла сравнения
	СписокОбъектов = Новый массив;
	ТекущийИндексМассива = -1;
    Для НомерСтроки = 1 По Текст.КоличествоСтрок() Цикл 
		ОбъектФормаИлиМакет = Ложь;				
		Стр = Текст.ПолучитьСтроку(НомерСтроки); 		
		Если Найти(Стр, "- ***") <> 0 или Найти(Стр, "- <--") или Найти(Стр, "- -->") <> 0 Тогда
			НачальнаяПозиция = 1;		
			Пока СтрНайти(Стр, "	",,НачальнаяПозиция) <> 0 Цикл
				КоличествоТабов = НачальнаяПозиция;
				НачальнаяПозиция = НачальнаяПозиция + 1;
			КонецЦикла;
			Если КоличествоТабов = 2 Тогда				
				СписокОбъектов.Добавить(Сред(Стр,КоличествоТабов + 6));					
				ТекущийИндексМассива = ТекущийИндексМассива + 1;								
				УровеньПредыдущегоОбъекта = КоличествоТабов; 
			КонецЕсли;
			Если КоличествоТабов = 3 Тогда						
				ПредОбъект = СписокОбъектов[ТекущийИндексМассива];
				НачальнаяПозиция = КоличествоТабов + 6;
				КонечнаяПозиция = СтрНайти(Стр, ".",,Найти(Стр, ".") + 1);
				ТекОбъект = Сред(Стр,НачальнаяПозиция,КонечнаяПозиция - НачальнаяПозиция);
				Если Найти(Стр, ".Форма.")<>0 Или Найти(Стр, ".Макет.")<>0 Тогда
					ОбъектФормаИлиМакет = Истина;				
				КонецЕсли; 				
				Если ПредОбъект = ТекОбъект и ОбъектФормаИлиМакет и УровеньПредыдущегоОбъекта = 2 Тогда
					СписокОбъектов[ТекущийИндексМассива] = Сред(Стр,КоличествоТабов + 6);					
				ИначеЕсли ОбъектФормаИлиМакет Тогда
					СписокОбъектов.Добавить(Сред(Стр,КоличествоТабов + 6));	
					ТекущийИндексМассива = ТекущийИндексМассива + 1;					
				КонецЕсли;	
			УровеньПредыдущегоОбъекта = КоличествоТабов;				
			КонецЕсли;			
		КонецЕсли;        
    КонецЦикла;     
		
	Если Не СписокОбъектов.Количество()>0 Тогда
		ТекстОшибки = "Нет элементов для создания файла списка объектов.";
		Возврат Ложь;
	КонецЕсли;
	
	// Создаем файл списка объектов
	Если ПолныйПутьКФайлуСпискаОбъектов = "" Тогда
		// BSLLS:MissingTemporaryFileDeletion-off
		ПолныйПутьКФайлуСпискаОбъектов = ПолучитьИмяВременногоФайла(".xml");
		// BSLLS:MissingTemporaryFileDeletion-off
	КонецЕсли;
	Запись = Новый ЗаписьXML;	
	Запись.ОткрытьФайл(ПолныйПутьКФайлуСпискаОбъектов, "UTF-8"); 
	Запись.ЗаписатьНачалоЭлемента("Objects"); 
	Запись.ЗаписатьАтрибут("xmlns", "http://v8.1c.ru/8.3/config/objects");
	Запись.ЗаписатьАтрибут("version", "1.0");
	Запись.ЗаписатьНачалоЭлемента("Configuration");
	Запись.ЗаписатьАтрибут("includeChildObjects", "false");
	Запись.ЗаписатьКонецЭлемента();
	// Записываем элемент для каждого объекта из массива
	Для каждого Строка Из СписокОбъектов Цикл
		Запись.ЗаписатьНачалоЭлемента("Object");		
		Запись.ЗаписатьАтрибут("fullName", Строка);		
		Запись.ЗаписатьАтрибут("includeChildObjects", "false");
		Запись.ЗаписатьКонецЭлемента();		
	КонецЦикла;
	Запись.ЗаписатьКонецЭлемента();
	Запись.Закрыть(); 

	Возврат Истина;
	
КонецФункции

// *****************************************************************
// Создает файл списка объектов на основании отчета с историей хранилища
//
// Параметры:
//	ПолныйПутьКФайлуОбъектов - полный путь к файлу, содержащему список объектов для захвата.
//	ПолныйПутьКФайлуСпискаОбъектов - полный путь к файлу списка объектов, если путь не указан, будет создан временный
//
// Возвращает:
//		Ложь 		- Были ошибки;
//		Истина		- Файл создан успешно.
//
Функция СоздатьФайлДляЗахватаОбъектов(
	ПолныйПутьКФайлуОбъектов, 
	ПолныйПутьКФайлуСпискаОбъектов="") Экспорт

	// Читаем файл c объектами
	Если ПолныйПутьКФайлуОбъектов = "" Тогда
		ТекстОшибки = "Не верное количество параметров. Не указан путь к файлу с объектами для захвата!";
		Возврат Ложь;		
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент; 
	Попытка
		Текст.Прочитать(ПолныйПутьКФайлуОбъектов, КодировкаТекста.UTF8); 
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;		
	КонецПопытки;
		
	Если Текст.КоличествоСтрок() = 0 Тогда
		ТекстОшибки = "Нет элементов для создания файла списка объектов.";
		Возврат Ложь;
	КонецЕсли;
	
	// Создаем файл списка объектов
	Если ПолныйПутьКФайлуСпискаОбъектов = "" Тогда
		ПолныйПутьКФайлуСпискаОбъектов = ПолучитьИмяВременногоФайла(".xml");
	КонецЕсли;
	Запись = Новый ЗаписьXML;	
	Запись.ОткрытьФайл(ПолныйПутьКФайлуСпискаОбъектов, "UTF-8"); 
	Запись.ЗаписатьНачалоЭлемента("Objects"); 
	Запись.ЗаписатьАтрибут("xmlns", "http://v8.1c.ru/8.3/config/objects");
	Запись.ЗаписатьАтрибут("version", "1.0");
	// Проверим, нужно ли захватывать корень
	Стр = СокрЛП(Текст.ПолучитьСтроку(1));
	Если СтрНайти(Стр, "Configuration") > 0
		Или СтрНайти(Стр, "КореньКонфигурации") > 0 Тогда
		Запись.ЗаписатьНачалоЭлемента("Configuration");
		Запись.ЗаписатьАтрибут("includeChildObjects", "false");
		Запись.ЗаписатьКонецЭлемента();
	КонецЕсли;
	// Записываем элемент для каждого объекта из файла
	Для НомерСтроки = 1 По Текст.КоличествоСтрок() Цикл 
		Стр = СокрЛП(Текст.ПолучитьСтроку(НомерСтроки));
		Если ПустаяСтрока(Стр) Тогда
			Продолжить;
		КонецЕсли;
		Если Лев(Стр, 1) = "+" Тогда
			ВключатьПодчиненные = "true";
			Стр = Сред(Стр, 2);
		Иначе
			ВключатьПодчиненные = "false";
		КонецЕсли;
		Запись.ЗаписатьНачалоЭлемента("Object");		
		Запись.ЗаписатьАтрибут("fullName", Стр);		
		Запись.ЗаписатьАтрибут("includeChildObjects", ВключатьПодчиненные);
		Запись.ЗаписатьКонецЭлемента();		
	КонецЦикла;
	Запись.ЗаписатьКонецЭлемента();
	Запись.Закрыть(); 
	
	Возврат Истина;
	
КонецФункции

// *****************************************************************
// Создает файл списка объектов на основании отчета с историей хранилища
//
// Параметры:
//	ПолныйПутьКФайлуОтчета - полный путь к файлу отчета с историей хранилища (отчет должен быть в формате txt) 
//	ПолныйПутьКФайлуСпискаОбъектов - полный путь к файлу списка объектов, если путь не указан, будет создан временный
//	ПолныйПутьКФайлуРазрешенныхОбъектов - полный путь к файлу, содержащему список объектов для захвата. 
//		Если указан, то объекты из файла ПолныйПутьКФайлуОтчета будут фильтроваться объектами из ПолныйПутьКФайлуРазрешенныхОбъектов.
//	ПолныйПутьКФайлуНеВошедшихОбъектов - полный путь к файлу, в который будут записаны объекты, 
//		присутствующие в файле с историей хранилища, но не присутствующие в файле ПолныйПутьКФайлуРазрешенныхОбъектов.
//
// Возвращает:
//		Ложь 		- Были ошибки;
//		Истина		- Файл создан успешно.
//
Функция СоздатьФайлДляЗахватаОбъектовИзФайлаИсторииХранилища(
	ПолныйПутьКФайлуОтчета="", 
	ПолныйПутьКФайлуСпискаОбъектов="", 
	ПолныйПутьКФайлуРазрешенныхОбъектов = ""
	ПолныйПутьКФайлуНеВошедшихОбъектов) Экспорт
	
	// Читаем путь к файлу разрешенных объектов, если не задан
	СписокРазрешенныхОбъектов = Новый Массив;
	СписокНеВошедшихОбъектов = Новый Массив;
	Если ПолныйПутьКФайлуРазрешенныхОбъектов <> "" Тогда
		
		Текст = Новый ТекстовыйДокумент; 
		Попытка
			Текст.Прочитать(ПолныйПутьКФайлуРазрешенныхОбъектов, КодировкаТекста.UTF8); 
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Возврат Ложь;		
		КонецПопытки;
		
		Для НомерСтроки = 1 По Текст.КоличествоСтрок() Цикл			
			Стр = Текст.ПолучитьСтроку(НомерСтроки); 
			СписокРазрешенныхОбъектов.Добавить(СокрЛП(Стр));
		КонецЦикла; 

	КонецЕсли;

	// Читаем файл отчета о сравнении
	Если ПолныйПутьКФайлуОтчета = "" Тогда
		ТекстОшибки = "Не верное количество параметров. Не указан путь к файлу отчета с историей хранилища!";
		Возврат Ложь;		
	КонецЕсли;
	Текст = Новый ТекстовыйДокумент; 
	Попытка
		Текст.Прочитать(ПолныйПутьКФайлуОтчета, КодировкаТекста.UTF8); 
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;		
	КонецПопытки;
	
	// Создаем структуру объектов из файла сравнения
	СписокОбъектов = Новый Массив;
    Для НомерСтроки = 1 По Текст.КоличествоСтрок() Цикл
		
		Стр = Текст.ПолучитьСтроку(НомерСтроки); 
		Если Лев(Стр, 1) = Символы.Таб Тогда
			
			Стр = СокрЛП(Стр);
			Если Лев(Стр, 8) <> "Изменены" Тогда
				
				Если СписокРазрешенныхОбъектов.Количество() = 0 Тогда
					ПомещатьВСписок = Истина;
				ИначеЕсли СписокРазрешенныхОбъектов.Найти(Стр) = Неопределено Тогда
					СписокНеВошедшихОбъектов.Добавить(Стр);
					ПомещатьВСписок = Ложь;
				Иначе
					ПомещатьВСписок = Истина;
				КонецЕсли;

				Если ПомещатьВСписок И СписокОбъектов.Найти(Стр) = Неопределено Тогда
					СписокОбъектов.Добавить(Стр);
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
    
    КонецЦикла; 

	Если ПолныйПутьКФайлуНеВошедшихОбъектов <> ""
		И СписокНеВошедшихОбъектов.Количество() > 0 Тогда

		Текст = Новый ТекстовыйДокумент;
		Для Каждого Строка Из СписокНеВошедшихОбъектов Цикл
			Текст.ДобавитьСтроку(Строка);
		КонецЦикла; 
		Попытка
			Текст.Записать(ПолныйПутьКФайлуНеВошедшихОбъектов, КодировкаТекста.UTF8); 
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Возврат Ложь;		
		КонецПопытки;

	КонецЕсли;
		
	Если Не СписокОбъектов.Количество() > 0 Тогда
		ТекстОшибки = "Нет элементов для создания файла списка объектов.";
		Возврат Ложь;
	КонецЕсли;
	
	// Создаем файл списка объектов
	Если ПолныйПутьКФайлуСпискаОбъектов = "" Тогда
		ПолныйПутьКФайлуСпискаОбъектов = ПолучитьИмяВременногоФайла(".xml");
	КонецЕсли;
	Запись = Новый ЗаписьXML;	
	Запись.ОткрытьФайл(ПолныйПутьКФайлуСпискаОбъектов, "UTF-8"); 
	Запись.ЗаписатьНачалоЭлемента("Objects"); 
	Запись.ЗаписатьАтрибут("xmlns", "http://v8.1c.ru/8.3/config/objects");
	Запись.ЗаписатьАтрибут("version", "1.0");
	Если СписокОбъектов.Найти("Configuration") <> Неопределено Тогда
		Запись.ЗаписатьНачалоЭлемента("Configuration");
		Запись.ЗаписатьАтрибут("includeChildObjects", "false");
		Запись.ЗаписатьКонецЭлемента();
	КонецЕсли;
	// Записываем элемент для каждого объекта из массива
	Для каждого Строка Из СписокОбъектов Цикл
		Запись.ЗаписатьНачалоЭлемента("Object");		
		Запись.ЗаписатьАтрибут("fullName", Строка);		
		Запись.ЗаписатьАтрибут("includeChildObjects", "false");
		Запись.ЗаписатьКонецЭлемента();		
	КонецЦикла;
	Запись.ЗаписатьКонецЭлемента();
	Запись.Закрыть(); 
	
	Возврат Истина;
	
КонецФункции

// *****************************************************************
// Создает файл настроек объединения, в котором не выбран ни один объект для объединения.
//	ПолныйПутьКФайлуСпискаОбъектов - путь к текстовому файлу, содержащему список объектов для создания файл
//	ПолныйПутьКФайлуНастроек - путь для сохранения итогового файла
//
//	Исплоьзуется для обновления только конфигурации поставщика.
//
//	Возвращает:
//		Неопределено 	- были ошибки;
//		Путь к файлу списка объектов - Файл создан успешно.
//
Функция СоздатьФайлНастроекОбъединения(ПолныйПутьКФайлуСпискаОбъектов, ПолныйПутьКФайлуНастроек) Экспорт

	Текст = Новый ТекстовыйДокумент; 
	Попытка
		Текст.Прочитать(ПолныйПутьКФайлуСпискаОбъектов, КодировкаТекста.UTF8); 
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;		
	КонецПопытки;

	Запись = Новый ЗаписьXML;
	Попытка	
		Запись.ОткрытьФайл(ПолныйПутьКФайлуНастроек, "UTF-8");
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки; 

	Запись.ЗаписатьНачалоЭлемента("Settings"); 
	Запись.ЗаписатьАтрибут("xmlns", "http://v8.1c.ru/8.3/config/merge/settings");
	Запись.ЗаписатьАтрибут("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
	Запись.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	Запись.ЗаписатьАтрибут("version", "1.1");
	
	Запись.ЗаписатьНачалоЭлемента("MainConfiguration");	
	Запись.ЗаписатьКонецЭлемента();	
	
	Запись.ЗаписатьНачалоЭлемента("SecondConfiguration");	
	Запись.ЗаписатьКонецЭлемента();

	Запись.ЗаписатьНачалоЭлемента("Parameters");	
	Запись.ЗаписатьКонецЭлемента();

	Запись.ЗаписатьНачалоЭлемента("Objects");
	
	Для НомерСтроки = 1 По Текст.КоличествоСтрок() Цикл			
		Стр = СокрЛП(Текст.ПолучитьСтроку(НомерСтроки)); 
		Запись.ЗаписатьНачалоЭлемента("Object");
		Запись.ЗаписатьАтрибут("fullName", Стр);
		Запись.ЗаписатьНачалоЭлемента("ObjectOrder");
		Запись.ЗаписатьАтрибут("GetFromMainConfiguration");
		Запись.ЗаписатьКонецЭлемента();	
		Запись.ЗаписатьКонецЭлемента();	
	КонецЦикла; 	

	Запись.ЗаписатьКонецЭлемента();			
	Запись.Закрыть();
	
	Возврат Истина;

КонецФункции

#КонецОбласти

#Область РИБ

// *****************************************************************
// Отменяет назначение главного узла РИБ
//
Функция ОтменитьНазначениеГлавногоУзлаРИБ() Экспорт
	
	ТекстОшибки  = "";
	
	// Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыЗапуска.ТипБазы = "S" Тогда
		СтрокаСоединения = "Srvr='" + ПараметрыЗапуска.АдресКластера + ":" 
			+ ПараметрыЗапуска.ПортКластера + "'; Ref='" + ПараметрыЗапуска.ИмяБазы + "';";
	Иначе
		СтрокаСоединения = "File='" + ПараметрыЗапуска.ИмяБазы + "';";
	КонецЕсли;
	СтрокаСоединения = СтрокаСоединения + "usr='" + ПараметрыЗапуска.ИмяПользователя 
		+ "'; pwd='" + ПараметрыЗапуска.ПарольПользователя + "';";	

	Попытка
		
		// Получаем COMConnector
		Коннектор = Новый COMОбъект("v" + ПараметрыЗапуска.ВерсияПлатформы + ".COMConnector");
		// Устанавливаем соединение с информационной базой
		СоединениеСИБ = Коннектор.Connect(СтрокаСоединения);
		
		// Отменяем назначение главного узла РИБ
		СоединениеСИБ.ПланыОбмена.УстановитьГлавныйУзел(Неопределено);

	Исключение		
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

// *****************************************************************
// Сразу при создании инициируем параметры
ИнициироватьПараметры();
   
