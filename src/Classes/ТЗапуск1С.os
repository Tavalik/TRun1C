//*****************************************************************
// Библиотека: TRun1C
// Автор: Онянов Виталий (Tavalik.ru)
// Версия от 15.08.2017
//

//*****************************************************************
// ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ

// Структура параметров запуска, описание в процедуре ИнициироватьПараметры()
Перем ПараметрыЗапуска Экспорт;
// Переменная для возврата ошибки, если таковая имела место быть
Перем ТекстОшибки Экспорт;


//*****************************************************************
// ЛОКАЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//*****************************************************************
Процедура ИнициироватьПараметры()
   
	ПараметрыЗапуска = Новый Структура;
	
	//Путь к платформе 1С, 
	//Пример:
	//	C:\Program Files (x86)\1cv8\8.3.8.2054\bin\1cv8.exe
	ПараметрыЗапуска.Вставить("ПутьКПлатформе1С","");
	
	//Версия Платформы 1С (Если не заполнена, вычисляется автоматически)
	//Пример:
	//	81
	//	82
	//	83
	ПараметрыЗапуска.Вставить("ВерсияПлатформы","");
	
	//Тип базы 1С
	//Варианты:
	//	F - файловая 
	//  S - серверная
	//  WS - веб
	ПараметрыЗапуска.Вставить("ТипБазы","S");
	
	//Имя базы 1С
	//Указывается как для файловой, так и для серверной базы:
	ПараметрыЗапуска.Вставить("ИмяБазы","");

	//Параметры сервера 1С
	//Указывается только для серверной базы
	ПараметрыЗапуска.Вставить("АдресКластера","localhost");
	ПараметрыЗапуска.Вставить("ПортКластера","1541");
	ПараметрыЗапуска.Вставить("ПортАгента","1540");
	ПараметрыЗапуска.Вставить("ИмяПользователяАдминистратораКластера","");
	ПараметрыЗапуска.Вставить("ПарольПользователяАдминистратораКластера","");
	ПараметрыЗапуска.Вставить("КодРазрешения","987654321");
	ПараметрыЗапуска.Вставить("СообщениеПриБлокировке","Информационная база заблокирована для обслуживания.");
	
	//Параметры авторизации в информационной базе
	ПараметрыЗапуска.Вставить("ИмяПользователя","");
	ПараметрыЗапуска.Вставить("ПарольПользователя","");
	
	//Параметры работы с хранилищем
	ПараметрыЗапуска.Вставить("АдресХранилища","");
	ПараметрыЗапуска.Вставить("ИмяПользователяХранилища","");
	ПараметрыЗапуска.Вставить("ПарольПользователяХранилища","");
	
	//При установке данного флага, все дейстия в пакетном запуске конфигуратора будут видны пользователю
	ПараметрыЗапуска.Вставить("ВидныДействияВПакетномРежиме",Ложь);
	//При указании имени файла, результат работы конфигуратора в пакетном режиме будет записан в данные файл файл
	ПараметрыЗапуска.Вставить("ФайлДляЗаписиРезультатовРаботыВПакетномРежиме","");

	//Текст ошибки
	ТекстОшибки = "";

КонецПроцедуры

//*****************************************************************
Функция ПолучитьВерсиюПлатформы()

	Если СтрНайти(ПараметрыЗапуска.ПутьКПлатформе1С,"\1cv8\8.3.") > 0 Тогда
		Возврат "83";
	КонецЕсли;

	Если СтрНайти(ПараметрыЗапуска.ПутьКПлатформе1С,"\1cv82\8.2.") > 0 Тогда
		Возврат "82";
	КонецЕсли;

	Если СтрНайти(ПараметрыЗапуска.ПутьКПлатформе1С,"\1cv81\") > 0 Тогда
		Возврат "81";
	КонецЕсли;

	Возврат "";

КонецФункции

//*****************************************************************
Функция ВсеПараметрыЗапускаЗаполненыКорректно(ПроверятьАдресХранилища=Ложь, ПроверятьИмяПользователяХранилища=Ложь)

	Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.ПутьКПлатформе1С) Тогда
		ТекстОшибки = "Не заполнен путь к платформе 1С!";
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.ВерсияПлатформы) Тогда
		// Попробуем определить версию платформы
		ПараметрыЗапуска.ВерсияПлатформы = ПолучитьВерсиюПлатформы();
		Если Не ЗначениеЗаполнено(ПараметрыЗапуска.ВерсияПлатформы) Тогда
			ТекстОшибки = "Не заполнена версия COMConnector!";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.ТипБазы) Тогда
		ТекстОшибки = "Не заполнен тип базы 1С!";
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.ИмяБазы) Тогда
		ТекстОшибки = "Не заполнено имя базы 1С!";
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыЗапуска.ТипБазы = "S" Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.АдресКластера) Тогда
			ТекстОшибки = "Не заполнен адрес кластера серверов 1С!";
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.ПортКластера) Тогда
			ТекстОшибки = "Не заполнен порт кластера серверов 1С!";
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.ПортАгента) Тогда
			ТекстОшибки = "Не заполнен порт агента кластера серверов 1С!";
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.КодРазрешения) Тогда
			ТекстОшибки = "Не заполнен код разрешения при блокировке сансов 1С!";
			Возврат Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПроверятьАдресХранилища Тогда		
		Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.АдресХранилища) Тогда
			ТекстОшибки = "Не заполнен адрес хранилища конфигурации!";
			Возврат Ложь;
		КонецЕсли;		
	КонецЕсли;
	
	Если ПроверятьИмяПользователяХранилища Тогда		
		Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.ИмяПользователяХранилища) Тогда
			ТекстОшибки = "Не заполнено имя пользователя хранилища конфигурации!";
			Возврат Ложь;
		КонецЕсли;		
	КонецЕсли;		
	
	Возврат Истина;

КонецФункции
 
//*****************************************************************
Функция ОбернутьВКавычки(ВходящаяСтрока)
	Возврат """" + ВходящаяСтрока + """";
КонецФункции

//*****************************************************************
Функция ВставитьПараметрЗапуска(Параметр, Ключ="", СимволКлюча = "/", ОбернутьВКавычки=Истина)

	Если СтрДлина(Параметр)=0 Тогда
		Возврат "";
	Иначе
		Если СтрДлина(Ключ)=0 Тогда
			Если ОбернутьВКавычки Тогда
				Возврат ОбернутьВКавычки(СокрЛП(Параметр)) + " ";
			Иначе
				Возврат Параметр + " ";
			КонецЕсли;
		Иначе
			Если ОбернутьВКавычки Тогда		
				Возврат СимволКлюча + Ключ + ОбернутьВКавычки(СокрЛП(Параметр)) + " ";
			Иначе
				Возврат СимволКлюча + Ключ + СокрЛП(Параметр) + " ";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции 


 
//*****************************************************************
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//*****************************************************************
// Выполняет сборс всех параметров запуска к настройкам по умолчанию
//
Процедура ОчиститьПараметры() Экспорт

	ПараметрыЗапуска = Неопределено;
	ИнициироватьПараметры();

КонецПроцедуры

//*****************************************************************
// Возвращает имя файла, построенном по принципу: ИмяБазы + ДатаВремя + Расширение
// Пример: Base_2017_04_28_19_02_12.dt
//
Функция ИмяФайлаПоИмениБазыНаДату(Расширение) Экспорт

	ТекИмяБазы = СокрЛП(ПараметрыЗапуска.ИмяБазы); 
	Если ПараметрыЗапуска.ТипБазы = "F" Тогда		
		НомерСлеша = 0;		
		Для Сч = 1 По СтрДлина(ТекИмяБазы) Цикл
			Если Сред(ТекИмяБазы,Сч,1) = "\" Тогда
				НомерСлеша = Сч;
			КонецЕсли
		КонецЦикла;
		ТекИмяБазы = Сред(ТекИмяБазы,НомерСлеша+1);
	КонецЕсли;
		
	Возврат СокрЛП(ТекИмяБазы) + Формат(ТекущаяДата(),"ДФ=_yyyy_MM_dd_ЧЧ_мм_сс") + "." + Расширение;

КонецФункции


//*****************************************************************
// Завершает работу пользователей для серверной базы
//
Функция ЗавершитьРаботуПользователей() Экспорт
 
 	БазаБылаНайдена = Ложь;
	ТекстОшибки  = "";
	
	//Проверим, не файловая ли база
	Если ПараметрыЗапуска.ТипБазы = "F" Тогда
		ТекстОшибки = "Недоступно для файловой базы";
		Возврат Ложь;
	КонецЕсли;
	
	//Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Ложь;
	КонецЕсли;
 	
	Попытка
		
		//Получаем COMConnector
		Коннектор = Новый COMОбъект("v" + ПараметрыЗапуска.ВерсияПлатформы + ".COMConnector");
		//Получаем Соединение с агентом сервера
		СоединениеСАгентомСервера = Коннектор.ConnectAgent(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортАгента);
		
		//Получаем список кластеров		
		КластерыСерверов = СоединениеСАгентомСервера.GetClusters(); 
		Для Каждого КластерСерверов Из КластерыСерверов Цикл			
			
			//Аутентификация администратора кластера серверов
			СоединениеСАгентомСервера.Authenticate(КластерСерверов,ПараметрыЗапуска.ИмяПользователяАдминистратораКластера,ПараметрыЗапуска.ПарольПользователяАдминистратораКластера);
			
			//Получаем все рабочие процессы
			РабочиеПроцессы = СоединениеСАгентомСервера.GetWorkingProcesses(КластерСерверов);
			Для Каждого РабочийПроцесс Из РабочиеПроцессы Цикл
				
				//Создаем соединение с рабочим процессом
				СоединениеСРабочимПроцессом = Коннектор.ConnectWorkingProcess(ПараметрыЗапуска.АдресКластера + ":" + СтрЗаменить(РабочийПроцесс.MainPort, Символы.НПП, ""));
				//Выполняем аутентификацию
				СоединениеСРабочимПроцессом.AddAuthentication(ПараметрыЗапуска.ИмяПользователя, ПараметрыЗапуска.ПарольПользователя);
				
				//Получаем информационные базы
				ИнформационныеБазы = СоединениеСРабочимПроцессом.GetInfoBases();				
				Для Каждого ИнформационнаяБаза ИЗ ИнформационныеБазы Цикл
					
					Если НРег(ИнформационнаяБаза.Name) = НРег(ПараметрыЗапуска.ИмяБазы) Тогда
					
						//Пометим, что база была найдена
						БазаБылаНайдена = Истина;
						
						//Получаем массив соединений информационной базы
						Соединения = СоединениеСРабочимПроцессом.GetInfoBaseConnections(ИнформационнаяБаза);
						Для Каждого Соединение Из Соединения Цикл
							
							// Не трогаем сенасы в коносле кластера
							Если НРег(Соединение.AppID) = "comconsole" Тогда
								Продолжить;
							КонецЕсли;
							
							//Разрываем соединение
							СоединениеСРабочимПроцессом.Disconnect(Соединение);
							
						КонецЦикла;

						Прервать;					
  
					КонецЕсли;
					
				КонецЦикла;
		
			КонецЦикла;
			
		КонецЦикла;	
		
	Исключение		
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	
	
	Если НЕ БазаБылаНайдена Тогда
		ТекстОшибки = "Информационная база не была найдена в кластере";
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

//*****************************************************************
// Устанавливает блокирвку сенасов для серверной базы
//
Функция УстановитьБлокировкуНачалаСеансов(БлокироватьРегламентныеЗадания = Истина) Экспорт
	
 	БазаБылаНайдена = Ложь;
	ТекстОшибки  = "";
	
	//Проверим, не файловая ли база
	Если ПараметрыЗапуска.ТипБазы = "F" Тогда
		ТекстОшибки = "Недоступно для файловой базы";
		Возврат Ложь;
	КонецЕсли;
	
	//Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		
		//Получаем COMConnector
		Коннектор = Новый COMОбъект("v" + ПараметрыЗапуска.ВерсияПлатформы + ".COMConnector");
		//Получаем Соединение с агентом сервера
		СоединениеСАгентомСервера = Коннектор.ConnectAgent(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортАгента);
		
		//Получаем список кластеров		
		КластерыСерверов = СоединениеСАгентомСервера.GetClusters(); 
		Для Каждого КластерСерверов Из КластерыСерверов Цикл			
			
			//Аутентификация администратора кластера серверов
			СоединениеСАгентомСервера.Authenticate(КластерСерверов,ПараметрыЗапуска.ИмяПользователяАдминистратораКластера,ПараметрыЗапуска.ПарольПользователяАдминистратораКластера);
			
			//Получаем все рабочие процессы
			РабочиеПроцессы = СоединениеСАгентомСервера.GetWorkingProcesses(КластерСерверов);
			Для Каждого РабочийПроцесс Из РабочиеПроцессы Цикл
				
				//Создаем соединение с рабочим процессом
				СоединениеСРабочимПроцессом = Коннектор.ConnectWorkingProcess(ПараметрыЗапуска.АдресКластера + ":" + СтрЗаменить(РабочийПроцесс.MainPort, Символы.НПП, ""));
				//Выполняем аутентификацию
				СоединениеСРабочимПроцессом.AddAuthentication(ПараметрыЗапуска.ИмяПользователя, ПараметрыЗапуска.ПарольПользователя);
				
				//Получаем информационные базы
				ИнформационныеБазы = СоединениеСРабочимПроцессом.GetInfoBases();				
				Для Каждого ИнформационнаяБаза ИЗ ИнформационныеБазы Цикл
					
					Если НРег(ИнформационнаяБаза.Name) = НРег(ПараметрыЗапуска.ИмяБазы) Тогда
					
						//Пометим, что база была найдена
						БазаБылаНайдена = Истина;
						
						//Блокируем начало сеансов
						Если ПараметрыЗапуска.ВерсияПлатформы = "81" Тогда
							ИнформационнаяБаза.ConnectDenied = Истина;
						Иначе
							ИнформационнаяБаза.SessionsDenied = Истина;
						КонецЕсли;
						ИнформационнаяБаза.PermissionCode = ПараметрыЗапуска.КодРазрешения;
						ИнформационнаяБаза.DeniedMessage = ПараметрыЗапуска.СообщениеПриБлокировке;
						
						//Блокируем регламентные задания
						Если БлокироватьРегламентныеЗадания Тогда
							ИнформационнаяБаза.ScheduledJobsDenied = Истина;
						КонецЕсли;
						
						//Изменяем параметры информационной базы
						СоединениеСРабочимПроцессом.UpdateInfoBase(ИнформационнаяБаза);
					
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
		
			КонецЦикла;
			
		КонецЦикла;	
		
	Исключение		
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	
	
	Если НЕ БазаБылаНайдена Тогда
		ТекстОшибки = "Информационная база не была найдена в кластере";
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
 
//*****************************************************************
// Снимает блокировку сеансов для серверной базы
//
Функция СнятьБлокировкуНачалаСеансов(СнятьБлокировкуРегламентныхЗаданий = Истина) Экспорт
	
 	БазаБылаНайдена = Ложь;
	ТекстОшибки  = "";
	
	//Проверим, не файловая ли база
	Если ПараметрыЗапуска.ТипБазы = "F" Тогда
		ТекстОшибки = "Недоступно для файловой базы";
		Возврат Ложь;
	КонецЕсли;
	
	//Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		
		//Получаем COMConnector
		Коннектор = Новый COMОбъект("v" + ПараметрыЗапуска.ВерсияПлатформы + ".COMConnector");
		//Получаем Соединение с агентом сервера
		СоединениеСАгентомСервера = Коннектор.ConnectAgent(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортАгента);
		
		//Получаем список кластеров		
		КластерыСерверов = СоединениеСАгентомСервера.GetClusters(); 
		Для Каждого КластерСерверов Из КластерыСерверов Цикл			
			
			//Аутентификация администратора кластера серверов
			СоединениеСАгентомСервера.Authenticate(КластерСерверов,ПараметрыЗапуска.ИмяПользователяАдминистратораКластера,ПараметрыЗапуска.ПарольПользователяАдминистратораКластера);
			
			//Получаем все рабочие процессы
			РабочиеПроцессы = СоединениеСАгентомСервера.GetWorkingProcesses(КластерСерверов);
			Для Каждого РабочийПроцесс Из РабочиеПроцессы Цикл
				
				//Создаем соединение с рабочим процессом
				СоединениеСРабочимПроцессом = Коннектор.ConnectWorkingProcess(ПараметрыЗапуска.АдресКластера + ":" + СтрЗаменить(РабочийПроцесс.MainPort, Символы.НПП, ""));
				//Выполняем аутентификацию
				СоединениеСРабочимПроцессом.AddAuthentication(ПараметрыЗапуска.ИмяПользователя, ПараметрыЗапуска.ПарольПользователя);
				
				//Получаем информационные базы
				ИнформационныеБазы = СоединениеСРабочимПроцессом.GetInfoBases();				
				Для Каждого ИнформационнаяБаза ИЗ ИнформационныеБазы Цикл
					
					Если НРег(ИнформационнаяБаза.Name) = НРег(ПараметрыЗапуска.ИмяБазы) Тогда
					
						//Пометим, что база была найдена
						БазаБылаНайдена = Истина;
						
						//Блокируем начало сеансов
						Если ПараметрыЗапуска.ВерсияПлатформы = "81" Тогда
							ИнформационнаяБаза.ConnectDenied = Ложь;
						Иначе
							ИнформационнаяБаза.SessionsDenied = Ложь;
						КонецЕсли;
						ИнформационнаяБаза.PermissionCode = "";
						ИнформационнаяБаза.DeniedMessage = "";
						
						//Блокируем регламентные задания
						Если СнятьБлокировкуРегламентныхЗаданий Тогда
							ИнформационнаяБаза.ScheduledJobsDenied = Ложь;
						КонецЕсли;
						
						//Изменяем параметры информационной базы
						СоединениеСРабочимПроцессом.UpdateInfoBase(ИнформационнаяБаза);
						
 						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
		
			КонецЦикла;
			
		КонецЦикла;	
		
	Исключение		
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	
	
	Если НЕ БазаБылаНайдена Тогда
		ТекстОшибки = "Информационная база не была найдена в кластере";
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

//*****************************************************************
// Получает список текущих сеансов с информационной базой
//
Функция ПолучитьСписокСеансов(ПропускатьКонсольКластера = Истина) Экспорт
 
 	БазаБылаНайдена = Ложь;
	ТекстОшибки  = "";
	
	// Проверим, не файловая ли база
	Если ПараметрыЗапуска.ТипБазы = "F" Тогда
		ТекстОшибки = "Недоступно для файловой базы";
		Возврат Неопределено;
	КонецЕсли;
	
	// Проверим ключевые параметры запуска
	Если Не ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаСеансов = Новый ТаблицаЗначений;
	ТаблицаСеансов.Колонки.Добавить("НомерСоединения");
	ТаблицаСеансов.Колонки.Добавить("ВремяНачала");
	ТаблицаСеансов.Колонки.Добавить("ИмяПользователя");
	ТаблицаСеансов.Колонки.Добавить("ИмяКомпьютера");
	ТаблицаСеансов.Колонки.Добавить("Приложение");
 	
	Попытка
		
		// Получаем COMConnector
		Коннектор = Новый COMОбъект("v" + ПараметрыЗапуска.ВерсияПлатформы + ".COMConnector");
		// Получаем Соединение с агентом сервера
		СоединениеСАгентомСервера = Коннектор.ConnectAgent(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортАгента);
		
		// Получаем список кластеров		
		КластерыСерверов = СоединениеСАгентомСервера.GetClusters(); 
		Для Каждого КластерСерверов Из КластерыСерверов Цикл			
			
			// Аутентификация администратора кластера серверов
			СоединениеСАгентомСервера.Authenticate(КластерСерверов,ПараметрыЗапуска.ИмяПользователяАдминистратораКластера,ПараметрыЗапуска.ПарольПользователяАдминистратораКластера);
			
			// Получаем все рабочие процессы
			РабочиеПроцессы = СоединениеСАгентомСервера.GetWorkingProcesses(КластерСерверов);
			Для Каждого РабочийПроцесс Из РабочиеПроцессы Цикл
				
				// Создаем соединение с рабочим процессом
				СоединениеСРабочимПроцессом = Коннектор.ConnectWorkingProcess(ПараметрыЗапуска.АдресКластера + ":" + СтрЗаменить(РабочийПроцесс.MainPort, Символы.НПП, ""));
				// Выполняем аутентификацию
				СоединениеСРабочимПроцессом.AddAuthentication(ПараметрыЗапуска.ИмяПользователя, ПараметрыЗапуска.ПарольПользователя);
				
				// Получаем информационные базы
				ИнформационныеБазы = СоединениеСРабочимПроцессом.GetInfoBases();				
				Для Каждого ИнформационнаяБаза ИЗ ИнформационныеБазы Цикл
					
					Если НРег(ИнформационнаяБаза.Name) = НРег(ПараметрыЗапуска.ИмяБазы) Тогда
					
						// Пометим, что база была найдена
						БазаБылаНайдена = Истина;
						
						// Получаем массив соединений информационной базы
						Соединения = СоединениеСРабочимПроцессом.GetInfoBaseConnections(ИнформационнаяБаза);
						Для Каждого Соединение Из Соединения Цикл
						
							//Не трогаем сенасы в коносле кластера
							Если ПропускатьКонсольКластера И НРег(Соединение.AppID) = "comconsole" Тогда
								Продолжить;
							КонецЕсли;
							
							// Добавить соединение в таблицу
							НоваяСтрока = ТаблицаСеансов.Добавить();
							НоваяСтрока.НомерСоединения = Соединение.ConnID;
							НоваяСтрока.ВремяНачала = Соединение.ConnectedAt;
							НоваяСтрока.ИмяКомпьютера = Соединение.HostName;
							НоваяСтрока.ИмяПользователя = Соединение.UserName;
							
							Приложение = Соединение.AppID;
							Если Приложение = "1CV8"
								ИЛИ Приложение = "1CV8C" Тогда
								НоваяСтрока.Приложение = "1С:Предприятие";
							ИначеЕсли Приложение = "Designer" Тогда
								НоваяСтрока.Приложение = "Конфигуратор";
							ИначеЕсли Приложение = "SrvrConsole" Тогда
								НоваяСтрока.Приложение = "Консоль кластера";
							ИначеЕсли Приложение = "BackgroundJob" Тогда
								НоваяСтрока.Приложение = "Фоновое задание";
							Иначе
								НоваяСтрока.Приложение = Приложение;
							КонецЕсли;
								
						КонецЦикла;						
			
						Прервать;					
  
					КонецЕсли;
					
				КонецЦикла;
		
			КонецЦикла;
			
		КонецЦикла;	
		
	Исключение		
		ТекстОшибки = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;	
	
	Если Не БазаБылаНайдена Тогда
		ТекстОшибки = "Информационная база не была найдена в кластере";
		Возврат Неопределено;
	Иначе
		Возврат ТаблицаСеансов;
	КонецЕсли;
	
КонецФункции


//*****************************************************************
// Запускает 1С:Предприятие
//
// Параметры:
//	ПутьКОбработке - Строка - Если указан путь к обработке, то обработка будет открыта после запуска 1С:Предприятие
//	ОжидатьЗавершения - Булево - Ожидать завершения работы 1С:Предприятие, по умолчанию - Ложь
//
Функция ЗапуститьПредприятие(ПутьКОбработке="", ОжидатьЗавершения = Ложь) Экспорт

	КодВозврата = 0;
	ТекстОшибки = "";
	
	//Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Ложь;
	КонецЕсли;

	//Выполним команду
	Попытка
		СтрокаЗапуска = 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПутьКПлатформе1С) +
			"ENTERPRISE " + 
			?(ПараметрыЗапуска.ТипБазы = "S",
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортКластера + "\" + ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы),
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы))	+ 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователя,"N") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователя,"P") +
			"/DisableStartupMessages " +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.КодРазрешения,"UC",,Ложь) +
			?(ПутьКОбработке="","",ВставитьПараметрЗапуска(ПутьКОбработке,"Execute"));
			
  		ЗапуститьПриложение(СтрокаЗапуска,,ОжидатьЗавершения,КодВозврата);
 
  	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка запуска 1С:Предприятие, КодВозврата=" + ПараметрыЗапуска.КодВозврата;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//*****************************************************************
// Запускает конфигуратор
//
// Параметры:
//	ОжидатьЗавершения - Булево - Ожидать завершения работы конфигуратора, по умолчанию - Ложь
//
Функция ЗапуститьКонфигуратор(ОжидатьЗавершения = Ложь) Экспорт

	КодВозврата = 0;
	ТекстОшибки = "";
	
	//Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Ложь;
	КонецЕсли;

	ИспользуетсяХранилище = ЗначениеЗаполнено(ПараметрыЗапуска.АдресХранилища);

	//Выполним команду
	Попытка
		СтрокаЗапуска = 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПутьКПлатформе1С) +
			"DESIGNER " + 
			?(ПараметрыЗапуска.ТипБазы = "S",
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортКластера + "\" + ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы),
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы))	+ 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователя,"N") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователя,"P") +
			?(ИспользуетсяХранилище,
				ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресХранилища,"ConfigurationRepositoryF") +
				ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователяХранилища,"ConfigurationRepositoryN") +
				ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователяХранилища,"ConfigurationRepositoryP"),"") +
			"/DisableStartupMessages " +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.КодРазрешения,"UC",,Ложь);
		
  		ЗапуститьПриложение(СтрокаЗапуска,,ОжидатьЗавершения,КодВозврата);
 
  	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка запуска конфигуратора, КодВозврата=" + ПараметрыЗапуска.КодВозврата;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
 
//*****************************************************************
// Выгружает информационную базу в указанный файл (dt)
//
// Параметры:
//	ПолныйПутьКФайлу - Строка - Полный путь к файлу
//	
Функция ВыгрузитьИнформационнуюБазу(ПолныйПутьКФайлу) Экспорт
 
	КодВозврата = 0;
	ТекстОшибки = "";
	
	//Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Ложь;
	КонецЕсли;

	ИспользуетсяХранилище = ЗначениеЗаполнено(ПараметрыЗапуска.АдресХранилища);
 
	//Удалим файл, если таковой имеется
	УдалитьФайлы(ПолныйПутьКФайлу);
	
	//Выполним команду
	Попытка
		СтрокаЗапуска = 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПутьКПлатформе1С) +
			"DESIGNER " + 
			?(ПараметрыЗапуска.ТипБазы = "S",
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортКластера + "\" + ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы),
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы))	+
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователя,"N") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователя,"P") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.КодРазрешения,"UC",,Ложь) +			
			ВставитьПараметрЗапуска(ПолныйПутьКФайлу,"DumpIB ") + 
			?(ИспользуетсяХранилище,
				ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресХранилища,"ConfigurationRepositoryF") +
				ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователяХранилища,"ConfigurationRepositoryN") +
				ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователяХранилища,"ConfigurationRepositoryP"),"") +
			"/DisableStartupMessages " +
			?(ПараметрыЗапуска.ВидныДействияВПакетномРежиме,"/Visible ","") + 
			?(ЗначениеЗаполнено(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме),ВставитьПараметрЗапуска(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме,"DumpResult "),"");
		
  		ЗапуститьПриложение(СтрокаЗапуска,,Истина,КодВозврата);
 
  	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка выгрузки информационной базы, КодВозврата=" + КодВозврата;
		Возврат Ложь;
	КонецЕсли;
	
	//Проверим, создался ли файл?
	Если НайтиФайлы(ПолныйПутьКФайлу).Количество() = 0 Тогда
		ТекстОшибки = "Команда выполнена успешно, но файл не найден после завершения.";
		Возврат Ложь;
	Иначе
		Возврат Истина; 
	КонецЕсли;
   
КонецФункции

//*****************************************************************
// Загружает информационную базу из указанного файла (dt)
//
// Параметры:
//	ПолныйПутьКФайлу - Строка - Полный путь к файлу
//
Функция ЗагрузитьИнформационнуюБазу(ПолныйПутьКФайлу) Экспорт
 
	КодВозврата = 0;
	ТекстОшибки = "";
	
	//Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Ложь;
	КонецЕсли;

	ИспользуетсяХранилище = ЗначениеЗаполнено(ПараметрыЗапуска.АдресХранилища);
 
	//Проверим, есть ли файл?
	Если НайтиФайлы(ПолныйПутьКФайлу).Количество() = 0 Тогда
		ТекстОшибки = "Не найден файл " + ПолныйПутьКФайлу;
		Возврат Ложь;
	КонецЕсли;
	
	//Выполним команду
	Попытка
		СтрокаЗапуска = 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПутьКПлатформе1С) +
			"DESIGNER " + 
			?(ПараметрыЗапуска.ТипБазы = "S",
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортКластера + "\" + ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы),
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы))	+
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователя,"N") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователя,"P") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.КодРазрешения,"UC",,Ложь) +			
			ВставитьПараметрЗапуска(ПолныйПутьКФайлу,"RestoreIB ") +
			?(ИспользуетсяХранилище,
				ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресХранилища,"ConfigurationRepositoryF") +
				ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователяХранилища,"ConfigurationRepositoryN") +
				ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователяХранилища,"ConfigurationRepositoryP"),"") +
			"/DisableStartupMessages " +
			?(ПараметрыЗапуска.ВидныДействияВПакетномРежиме,"/Visible ","") +
			?(ЗначениеЗаполнено(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме),ВставитьПараметрЗапуска(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме,"DumpResult "),"");
		
  		ЗапуститьПриложение(СтрокаЗапуска,,Истина,КодВозврата);
 
  	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка загрузки информационной базы, КодВозврата=" + КодВозврата;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//*****************************************************************
// Сохраняет текущую конфигурацию в указаннй файл (cf)
//
// Параметры:
//	ПолныйПутьКФайлу - Строка - Полный путь к файлу
//
Функция СохранитьКонфигурациюВФайл(ПолныйПутьКФайлу) Экспорт
 
	КодВозврата = 0;
	ТекстОшибки = "";
	
	//Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Ложь;
	КонецЕсли;

	ИспользуетсяХранилище = ЗначениеЗаполнено(ПараметрыЗапуска.АдресХранилища);
 
	//Удалим файл, если таковой имеется
	УдалитьФайлы(ПолныйПутьКФайлу);
	
	//Выполним команду
	Попытка
		СтрокаЗапуска = 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПутьКПлатформе1С) +
			"DESIGNER " + 
			?(ПараметрыЗапуска.ТипБазы = "S",
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортКластера + "\" + ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы),
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы))	+
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователя,"N") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователя,"P") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.КодРазрешения,"UC",,Ложь) +			
			ВставитьПараметрЗапуска(ПолныйПутьКФайлу,"DumpCfg ") + 
			?(ИспользуетсяХранилище,
				ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресХранилища,"ConfigurationRepositoryF") +
				ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователяХранилища,"ConfigurationRepositoryN") +
				ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователяХранилища,"ConfigurationRepositoryP"),"") +
			"/DisableStartupMessages " +
			?(ПараметрыЗапуска.ВидныДействияВПакетномРежиме,"/Visible ","") + 
			?(ЗначениеЗаполнено(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме),ВставитьПараметрЗапуска(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме,"DumpResult "),"");
		
  		ЗапуститьПриложение(СтрокаЗапуска,,Истина,КодВозврата);
 
  	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка сохранения конфигурации в файл, КодВозврата=" + КодВозврата;
		Возврат Ложь;
	КонецЕсли;
	
	//Проверим, создался ли файл?
	Если НайтиФайлы(ПолныйПутьКФайлу).Количество() = 0 Тогда
		ТекстОшибки = "Команда выполнена успешно, но файл не найден после завершения.";
		Возврат Ложь;
	Иначе
		Возврат Истина; 
	КонецЕсли;
   
КонецФункции

//*****************************************************************
// Сохраняет конфигурацию базы данных в указаннй файл (cf)
//
// Параметры:
//	ПолныйПутьКФайлу - Строка - Полный путь к файлу
//
Функция СохранитьКонфигурациюБазыДанныхВФайл(ПолныйПутьКФайлу) Экспорт
 
	КодВозврата = 0;
	ТекстОшибки = "";
	
	//Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Ложь;
	КонецЕсли;

	ИспользуетсяХранилище = ЗначениеЗаполнено(ПараметрыЗапуска.АдресХранилища);
 
	//Удалим файл, если таковой имеется
	УдалитьФайлы(ПолныйПутьКФайлу);
	
	//Выполним команду
	Попытка
		СтрокаЗапуска = 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПутьКПлатформе1С) +
			"DESIGNER " + 
			?(ПараметрыЗапуска.ТипБазы = "S",
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортКластера + "\" + ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы),
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы))	+
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователя,"N") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователя,"P") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.КодРазрешения,"UC",,Ложь) +			
			ВставитьПараметрЗапуска(ПолныйПутьКФайлу,"DumpDBCfg ") + 
			?(ИспользуетсяХранилище,
				ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресХранилища,"ConfigurationRepositoryF") +
				ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователяХранилища,"ConfigurationRepositoryN") +
				ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователяХранилища,"ConfigurationRepositoryP"),"") +
			"/DisableStartupMessages " +
			?(ПараметрыЗапуска.ВидныДействияВПакетномРежиме,"/Visible ","") + 
			?(ЗначениеЗаполнено(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме),ВставитьПараметрЗапуска(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме,"DumpResult "),"");
		
  		ЗапуститьПриложение(СтрокаЗапуска,,Истина,КодВозврата);
 
  	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка сохранения конфигурации базы данных в файл, КодВозврата=" + КодВозврата;
		Возврат Ложь;
	КонецЕсли;
	
	//Проверим, создался ли файл?
	Если НайтиФайлы(ПолныйПутьКФайлу).Количество() = 0 Тогда
		ТекстОшибки = "Команда выполнена успешно, но файл не найден после завершения.";
		Возврат Ложь;
	Иначе
		Возврат Истина; 
	КонецЕсли;
   
КонецФункции

//*****************************************************************
// Загружает конфигурацию из указанного файла (cf)
//
// Параметры:
//	ПолныйПутьКФайлу - Строка - Полный путь к файлу
//
Функция ЗагрузитьКонфигурациюИзФайла(ПолныйПутьКФайлу) Экспорт
 
	КодВозврата = 0;
	ТекстОшибки = "";
	
	//Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Ложь;
	КонецЕсли;

	ИспользуетсяХранилище = ЗначениеЗаполнено(ПараметрыЗапуска.АдресХранилища);
 
	//Проверим, есть ли файл?
	Если НайтиФайлы(ПолныйПутьКФайлу).Количество() = 0 Тогда
		ТекстОшибки = "Не найден файл " + ПолныйПутьКФайлу;
		Возврат Ложь;
	КонецЕсли;
	
	//Выполним команду
	Попытка
		СтрокаЗапуска = 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПутьКПлатформе1С) +
			"DESIGNER " + 
			?(ПараметрыЗапуска.ТипБазы = "S",
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортКластера + "\" + ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы),
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы))	+
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователя,"N") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователя,"P") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.КодРазрешения,"UC",,Ложь) +			
			ВставитьПараметрЗапуска(ПолныйПутьКФайлу,"LoadCfg ") +
			?(ИспользуетсяХранилище,
				ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресХранилища,"ConfigurationRepositoryF") +
				ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователяХранилища,"ConfigurationRepositoryN") +
				ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователяХранилища,"ConfigurationRepositoryP"),"") +
			"/DisableStartupMessages " +
			?(ПараметрыЗапуска.ВидныДействияВПакетномРежиме,"/Visible ","") +
			?(ЗначениеЗаполнено(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме),ВставитьПараметрЗапуска(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме,"DumpResult "),"");
		
  		ЗапуститьПриложение(СтрокаЗапуска,,Истина,КодВозврата);
 
  	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка загрузки конфигурации из файла, КодВозврата=" + КодВозврата;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//*****************************************************************
// Обновлет конфигурацию базы данных
// 
// Параметры:
//	ПредупрежденияКакОшибки - Булево - Если Истина, то все предупреждения трактуются как ошибки.
//	НаСервере - Булево - Если Истина, то обновление будет выполняться на сервере (имеет смысл только в клиент-серверном варианте работы).
//	
Функция ОбновитьКонфигурациюБазыДанных(ПредупрежденияКакОшибки=Ложь, НаСервере=Ложь) Экспорт
 
	КодВозврата = 0;
	ТекстОшибки = "";
	
	//Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно() Тогда
		Возврат Ложь;
	КонецЕсли;

	ИспользуетсяХранилище = ЗначениеЗаполнено(ПараметрыЗапуска.АдресХранилища);
	
	//Выполним команду
	Попытка
		СтрокаЗапуска = 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПутьКПлатформе1С) +
			"DESIGNER " + 
			?(ПараметрыЗапуска.ТипБазы = "S",
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортКластера + "\" + ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы),
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы))	+
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователя,"N") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователя,"P") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.КодРазрешения,"UC",,Ложь) +			
			"/UpdateDBCfg " +
			?(ПредупрежденияКакОшибки,"-WarningsAsErrors ","") +
			?(НаСервере,"-Server ","") +
			?(ИспользуетсяХранилище,
				ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресХранилища,"ConfigurationRepositoryF") +
				ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователяХранилища,"ConfigurationRepositoryN") +
				ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователяХранилища,"ConfigurationRepositoryP"),"") +
			"/DisableStartupMessages " +
			?(ПараметрыЗапуска.ВидныДействияВПакетномРежиме,"/Visible ","") +
			?(ЗначениеЗаполнено(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме),ВставитьПараметрЗапуска(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме,"DumpResult "),"");
		
  		ЗапуститьПриложение(СтрокаЗапуска,,Истина,КодВозврата);
 
  	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка обновления конфигурации базы данных, КодВозврата=" + КодВозврата;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//**********************************************************************************************
// Сравнивает две конфигурации с выводом отчета в файл
//
// Параметры:
//	ПутьИмяФайлаОтчета - путь к файлу отчета, если файл не существует, будет создан новый;
//	ТипПервойКонфигурации - Строка - Тип первой конфигурации. Возможные значния:
// 		MainConfiguration – основная конфигурация;
// 		DBConfiguration – конфигурация базы данных;
// 		VendorConfiguration – конфигурация поставщика;
// 		ExtensionConfiguration – расширение конфигурации;
// 		ExtensionDBConfiguration – расширение конфигурации из база данных;
// 		ConfigurationRepository – конфигурация из хранилища конфигурации;
//		File – файл конфигурации/расширения конфигурации.	
//	ТипВторойКонфигурации - Строка - Тип второй конфигурации. Возможные значения:
// 		MainConfiguration – основная конфигурация;
// 		DBConfiguration – конфигурация базы данных;
// 		VendorConfiguration – конфигурация поставщика;
// 		ExtensionConfiguration – расширение конфигурации;
// 		ExtensionDBConfiguration – расширение конфигурации из база данных;
// 		ConfigurationRepository – конфигурация из хранилища конфигурации;
//		File – файл конфигурации/расширения конфигурации.
//	ДопКлючПервойКонфигурации - Строка - дополнительный идентификатор первой конфигурации. Возможные значения (в зависимости от типа первой конфигурации):
//		MainConfiguration - Не используется
//		DBConfiguration - Не используется
//		VendorConfiguration - Имя конфигурации поставщика
//		ExtensionConfiguration - Имя конфигурации поставщика
//		ExtensionDBConfiguration - Имя конфигурации расширения (из базы данных)
//		ConfigurationRepository - Версия конфигурации в хранилище
//		File - Пусть к файлу конфигурации (.cf-файл) или расширения конфигурации (.cfe-файл)
//	ДопКлючВторойКонфигурации - Строка - дополнительный идентификатор второй конфигурации. Возможные значения (в зависимости от типа второй конфигурации):
//		MainConfiguration - Не используется
//		DBConfiguration - Не используется
//		VendorConfiguration - Имя конфигурации поставщика
//		ExtensionConfiguration - Имя конфигурации поставщика
//		ExtensionDBConfiguration - Имя конфигурации расширения (из базы данных)
//		ConfigurationRepository - Версия конфигурации в хранилище
//		File - Пусть к файлу конфигурации (.cf-файл) или расширения конфигурации (.cfe-файл)
//	ТипОтчетаДляСравнения - Строка - Тип отчета для сравнения. Возможные типы:
//		Brief – крайткий отчет;
//		Full – полный отчет.
//	ФорматФайлаОтчета - Строка - Формат файла отчета. Возможные значения:
//		txt – текстовый документ;
//		mxl – табличный документ.
//	ПравилоУстановкиСоответствийОбъектов - Строка - для тех случаев, когда конфигурации не состоят в отношениях «родитель-потомок», возможные значения:
//		ByObjectName – по именам объектов. Используется по умолчанию.
//		ByObjectIDs – по внутренним идентификаторам.
//	
// Возвращает:
//		Истина - Отчет сформирован успешно
//		Ложь - Были ошибки
//
Функция СравнитьКонфигурации(
	ПутьИмяФайлаОтчета,
	ТипПервойКонфигурации = "MainConfiguration",
	ТипВторойКонфигурации = "DBConfiguration",
	Знач ДопКлючПервойКонфигурации = "",
	Знач ДопКлючВторойКонфигурации = "",
	ТипОтчетаДляСравнения = "Brief",
	ФорматФайлаОтчета = "txt",	
	ПравилоУстановкиСоответствийОбъектов = "ByObjectName"
	) Экспорт
 
	КодВозврата = 0;
	ТекстОшибки = "";
	
	ИспользуетсяХранилище = ЗначениеЗаполнено(ПараметрыЗапуска.АдресХранилища);
	//Проверим ключевые параметры запуска
	Если Не ВсеПараметрыЗапускаЗаполненыКорректно(ИспользуетсяХранилище,ИспользуетсяХранилище) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Доработаем и проверим параметры запуска
	Если ТипПервойКонфигурации = "ConfigurationRepository" Тогда
		Если ДопКлючПервойКонфигурации = "" Тогда
			ДопКлючПервойКонфигурации = "0 ";
		КонецЕсли;
	ИначеЕсли ТипПервойКонфигурации = "File" Тогда
		Файл = Новый Файл(ДопКлючПервойКонфигурации);
		Если Не Файл.Существует() Тогда
			ТекстОшибки = "Не найден файл по пути: " + ДопКлючПервойКонфигурации;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ТипВторойКонфигурации = "ConfigurationRepository" Тогда
		Если ДопКлючВторойКонфигурации = "" Тогда
			ДопКлючВторойКонфигурации = "0 ";
		КонецЕсли;
	ИначеЕсли ТипВторойКонфигурации = "File" Тогда
		Файл = Новый Файл(ДопКлючВторойКонфигурации);
		Если Не Файл.Существует() Тогда
			ТекстОшибки = "Не найден файл по пути: " + ДопКлючВторойКонфигурации;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
 	
	//Выполним команду
	Попытка
		СтрокаЗапуска = 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПутьКПлатформе1С) +
			"DESIGNER " + 
			?(ПараметрыЗапуска.ТипБазы = "S",
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортКластера + "\" + ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы),
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы))	+
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователя,"N") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователя,"P") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.КодРазрешения,"UC",,Ложь) + 
			?(ИспользуетсяХранилище,
				ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресХранилища,"ConfigurationRepositoryF") +
				ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователяХранилища,"ConfigurationRepositoryN") +
				ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователяХранилища,"ConfigurationRepositoryP"),"") +			
			"/CompareCfg " + 			
			ВставитьПараметрЗапуска(ТипПервойКонфигурации,"FirstConfigurationType ","-", Ложь) +
			?(Найти("MainConfigurationDBConfiguration",ТипПервойКонфигурации)=0, "-FirstConfigurationKey " + ДопКлючПервойКонфигурации,"") +
			ВставитьПараметрЗапуска(ТипВторойКонфигурации,"SecondConfigurationType ","-", Ложь) +
			?(Найти("MainConfigurationDBConfiguration",ТипВторойКонфигурации)=0, "-SecondConfigurationKey " + ДопКлючВторойКонфигурации,"") +		
			?(ПравилоУстановкиСоответствийОбъектов <> "", ВставитьПараметрЗапуска(ПравилоУстановкиСоответствийОбъектов,"MappingRule ","-",Ложь),"") + 
			"-IncludeChangedObjects -IncludeDeletedObjects -IncludeAddedObjects " +
			ВставитьПараметрЗапуска(ТипОтчетаДляСравнения,"ReportType ","-",Ложь) +
			ВставитьПараметрЗапуска(ФорматФайлаОтчета,"ReportFormat ","-",Ложь) +			
			ВставитьПараметрЗапуска(ПутьИмяФайлаОтчета,"ReportFile ","-") +			
			"/DisableStartupMessages " +
			?(ПараметрыЗапуска.ВидныДействияВПакетномРежиме,"/Visible ","") + 
			?(ЗначениеЗаполнено(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме),ВставитьПараметрЗапуска(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме,"DumpResult "),"");
		
		ЗапуститьПриложение(СтрокаЗапуска,,Истина,КодВозврата);
		
		// Проверим, что файл сформирован
		Файл = Новый Файл(ПутьИмяФайлаОтчета);
		Если Не Файл.Существует() Тогда
			ТекстОшибки = "Файл сравенения не найден. Проверьте параметры подключения.";
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;				
		
  	Исключение
		ТекстОшибки = ОписаниеОшибки();		
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка сравнения конфигураций, КодВозврата=" + КодВозврата;		
		Возврат Ложь;
	КонецЕсли;	
   
КонецФункции

//*****************************************************************
// Проверяет есть ли записи об изменении в файле отчета о сравнении конфигураций.
// При условии, что отчет "краткий" в формате txt.
//
// Параметры:
//		ПутьКФайлуОтчетаОСравнении - Путь к файлу отчета о сравнении
//
// Возвращает:
//		Истина - Есть изменения
//		Ложь - Изменений нет
//		Неопределено - Были ошибки
//
Функция ЕстьИзмененияВОтчетеОСравненииКраткийТекст(ПутьКФайлуОтчетаОСравнении) Экспорт

	// Проверим существование файла
	Файл = Новый Файл(ПутьКФайлуОтчетаОСравнении);
	Если Не Файл.Существует() Тогда
		ТекстОшибки = "Файл " + ПутьКФайлуОтчетаОСравнении + " не найден!";
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуОтчетаОСравнении);
	Стр = ЧтениеТекста.ПрочитатьСтроку();
	ПрочитаноСтрок = 0;
	Пока Стр <> Неопределено Цикл
		Если СокрЛП(Стр) <> "" Тогда
			ПрочитаноСтрок = ПрочитаноСтрок + 1;
		КонецЕсли;
		Если ПрочитаноСтрок > 4 Тогда
			ЧтениеТекста.Закрыть();
			Возврат Истина;
		КонецЕсли;
		Стр = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;
	ЧтениеТекста.Закрыть();
	
	Возврат Ложь;
	
КонецФункции

//*****************************************************************
//	Проверяет, если ли изменения в основной конфигурации относительно конфигурации базы данных
//		
// Возвращает:
//		Истина - Есть изменения
//		Ложь - Изменений нет
//		Неопределено - Были ошибки
// 
Функция ЕстьИзмененияОсновнойКонфигурации() Экспорт

	// Создадим отчет о сравнении
	ВременныйФайлСравнения = ПолучитьИмяВременногоФайла("txt");
	Если Не СравнитьКонфигурации(ВременныйФайлСравнения,"MainConfiguration","DBConfiguration") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЕстьИзменения = ЕстьИзмененияВОтчетеОСравненииКраткийТекст(ВременныйФайлСравнения);
	
	// Удалим временный файл
	УдалитьФайлы(ВременныйФайлСравнения);
	
	Возврат ЕстьИзменения;

КонецФункции

//*****************************************************************
//	Проверяет, если ли изменения в хранилище относительно основной конфигурации
//		
// Возвращает:
//		Истина - Есть изменения
//		Ложь - Изменений нет
//		Неопределено - Были ошибки
// 
Функция ЕстьИзмененияВХранилище() Экспорт

	// Создадим отчет о сравнении
	ВременныйФайлСравнения = ПолучитьИмяВременногоФайла("txt");
	Если Не СравнитьКонфигурации(ВременныйФайлСравнения,"MainConfiguration","ConfigurationRepository") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЕстьИзменения = ЕстьИзмененияВОтчетеОСравненииКраткийТекст(ВременныйФайлСравнения);
	
	// Удалим временный файл
	//УдалитьФайлы(ВременныйФайлСравнения);
	
	Возврат ЕстьИзменения;

КонецФункции


//*****************************************************************
// Сохраняет конфигурацию из хранилища в файл
//
// Параметры:
//  ПолныйПутьКФайлу - Полный путь к файлу	
// 	НомерВерсии (-v [номер версии хранилища]) 
//		— номер версии хранилища, если номер версии не указан, или равен -1, будет сохранена последняя версия
//
Функция СохранитьКонфигурациюИзХранилищаВФайл(ПолныйПутьКФайлу, НомерВерсии="") Экспорт
 
	КодВозврата = 0;
	ТекстОшибки = "";
	
	//Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно(Истина,Истина) Тогда
		Возврат Ложь;
	КонецЕсли;
 
	//Удалим файл, если таковой имеется
	УдалитьФайлы(ПолныйПутьКФайлу);
	
	//Выполним команду
	Попытка
		СтрокаЗапуска = 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПутьКПлатформе1С) +
			"DESIGNER " + 
			?(ПараметрыЗапуска.ТипБазы = "S",
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортКластера + "\" + ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы),
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы))	+
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователя,"N") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователя,"P") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.КодРазрешения,"UC",,Ложь) +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресХранилища,"ConfigurationRepositoryF ") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователяХранилища,"ConfigurationRepositoryN ") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователяХранилища,"ConfigurationRepositoryP ") +
			ВставитьПараметрЗапуска(ПолныйПутьКФайлу,"ConfigurationRepositoryDumpCfg ") + 
			?(ЗначениеЗаполнено(НомерВерсии),"-v " + Формат(НомерВерсии,"ЧДЦ=0; ЧГ=0") + " ","") +
			"/DisableStartupMessages " +
			?(ПараметрыЗапуска.ВидныДействияВПакетномРежиме,"/Visible ","") + 
			?(ЗначениеЗаполнено(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме),ВставитьПараметрЗапуска(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме,"DumpResult "),"");
		
  		ЗапуститьПриложение(СтрокаЗапуска,,Истина,КодВозврата);
 
  	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка сохранения конфигурации из хранилища в файл, КодВозврата=" + КодВозврата;
		Возврат Ложь;
	КонецЕсли;
	
	//Проверим, создался ли файл?
	Если НайтиФайлы(ПолныйПутьКФайлу).Количество() = 0 Тогда
		ТекстОшибки = "Команда выполнена успешно, но файл не найден после завершения.";
		Возврат Ложь;
	Иначе
		Возврат Истина; 
	КонецЕсли;
   
КонецФункции

//*****************************************************************
// Обновляет текущую конфигурацию из хранилища
//
// Параметры:
// 	НомерВерсии (-v [номер версии хранилища]) 
//		— номер версии хранилища, если номер версии не указан, или равен -1, будет сохранена последняя версия, если конфигурация не подключена к хранилищу, то параметр игнорируется;
// 	ПолучатьЗахваченныеОбъекты (-revised) 
//		— получать захваченные объекты, если потребуется. Если конфигурация не подключена к хранилищу, то параметр игнорируется;
// 	Форсировать (-force)
//		— если при пакетном обновлении конфигурации из хранилища должны быть получены новые объекты конфигурации или удалиться существующие, указание этого параметра свидетельствует о подтверждении пользователем описанных выше операций. Если параметр не указан — действия выполнены не будут.
//
Функция ОбновитьКонфигурациюИзХранилища(НомерВерсии="", ПолучатьЗахваченныеОбъекты = Ложь, Форсировать = Истина) Экспорт
 
	КодВозврата = 0;
	ТекстОшибки = "";
	
	//Проверим ключевые параметры запуска
	Если НЕ ВсеПараметрыЗапускаЗаполненыКорректно(Истина,Истина) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Выполним команду
	Попытка
		СтрокаЗапуска = 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПутьКПлатформе1С) +
			"DESIGNER " + 
			?(ПараметрыЗапуска.ТипБазы = "S",
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортКластера + "\" + ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы),
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы))	+
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователя,"N") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователя,"P") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.КодРазрешения,"UC",,Ложь) +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресХранилища,"ConfigurationRepositoryF") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователяХранилища,"ConfigurationRepositoryN") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователяХранилища,"ConfigurationRepositoryP") +			
			"/ConfigurationRepositoryUpdateCfg " +
			?(ЗначениеЗаполнено(НомерВерсии),"-v " + Формат(НомерВерсии,"ЧДЦ=0; ЧГ=0") + " ","") +
			?(ПолучатьЗахваченныеОбъекты,"-revised ","") +
			?(Форсировать,"-force ","") +
			"/DisableStartupMessages " +
			?(ПараметрыЗапуска.ВидныДействияВПакетномРежиме,"/Visible ","") +
			?(ЗначениеЗаполнено(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме),ВставитьПараметрЗапуска(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме,"DumpResult "),"");
				
  		ЗапуститьПриложение(СтрокаЗапуска,,Истина,КодВозврата);
		
  	Исключение
		ТекстОшибки = ОписаниеОшибки();		
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка загрузки конфигурации из хранилища, КодВозврата=" + КодВозврата;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//*****************************************************************
// Отключает конфигурацию от хранилища
//
// Параметры:
// 	Форсировать (-force) Булево — ключ для форсирования отключения от хранилища (пропуск диалога аутентификации, если не указаны параметры пользователя хранилища, игнорирование наличия захваченных и измененных объектов).
//
// Возващает:
//	Истина - Операция успешно выполнена
//	Ложь - Были ошибки
//
Функция ОтключитьКонфигурациюОтХранилища(Форсировать = Истина) Экспорт
 
	КодВозврата = 0;
	ТекстОшибки = "";
	
	//Проверим ключевые параметры запуска
	Если Не ВсеПараметрыЗапускаЗаполненыКорректно(Истина,Не Форсировать) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Выполним команду
	Попытка
		СтрокаЗапуска = 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПутьКПлатформе1С) +
			"DESIGNER " + 
			?(ПараметрыЗапуска.ТипБазы = "S",
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортКластера + "\" + ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы),
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы))	+
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователя,"N") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователя,"P") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.КодРазрешения,"UC",,Ложь) +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресХранилища,"ConfigurationRepositoryF") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователяХранилища,"ConfigurationRepositoryN") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователяХранилища,"ConfigurationRepositoryP") +			
			"/ConfigurationRepositoryUnbindCfg " +
			?(Форсировать,"-force ","") +
			"/DisableStartupMessages " +
			?(ПараметрыЗапуска.ВидныДействияВПакетномРежиме,"/Visible ","") +
			?(ЗначениеЗаполнено(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме),ВставитьПараметрЗапуска(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме,"DumpResult "),"");
		
  		ЗапуститьПриложение(СтрокаЗапуска,,Истина,КодВозврата);
 
  	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка отключения конфигурации от хранилища, КодВозврата=" + КодВозврата;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//*****************************************************************
// Подключает конфигурацию к хранилищу
//
// Параметры:
// 	Форсировать (-force) — Булево - выполняет подключение даже в том случае, если для данного пользователя уже есть конфигурация, связанная с данным хранилищем.
//	ЗаменитьТекущуюКонфигурацию - Булево - если конфигурация непустая, данный ключ подтверждает замену конфигурации на конфигурацию из хранилища.
//
// Возващает:
//	Истина - Операция успешно выполнена
//	Ложь - Были ошибки
//
Функция ПодключитьКонфигурациюКХранилищу(Форсировать = Истина, ЗаменитьТекущуюКонфигурацию = Истина) Экспорт

	КодВозврата = 0;
	ТекстОшибки = "";
	
	//Проверим ключевые параметры запуска
	Если Не ВсеПараметрыЗапускаЗаполненыКорректно(Истина,Не Форсировать) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Выполним команду
	Попытка
		СтрокаЗапуска = 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПутьКПлатформе1С) +
			"DESIGNER " + 
			?(ПараметрыЗапуска.ТипБазы = "S",
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортКластера + "\" + ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы),
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы))	+
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователя,"N") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователя,"P") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.КодРазрешения,"UC",,Ложь) +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресХранилища,"ConfigurationRepositoryF") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователяХранилища,"ConfigurationRepositoryN") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователяХранилища,"ConfigurationRepositoryP") +			
			"/ConfigurationRepositoryBindCfg " +
			?(Форсировать,"-forceBindAlreadyBindedUser ","") +
			?(ЗаменитьТекущуюКонфигурацию,"-forceReplaceCfg ","") +
			"/DisableStartupMessages " +
			?(ПараметрыЗапуска.ВидныДействияВПакетномРежиме,"/Visible ","") +
			?(ЗначениеЗаполнено(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме),ВставитьПараметрЗапуска(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме,"DumpResult "),"");
		
  		ЗапуститьПриложение(СтрокаЗапуска,,Истина,КодВозврата);
 
  	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка отключения конфигурации от хранилища, КодВозврата=" + КодВозврата;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//*****************************************************************
// Выполняет очистку локального кэша хранилища конфигурации
//
// Возващает:
//	Истина - Операция успешно выполнена
//	Ложь - Были ошибки
//
Функция ВыполнитьОчисткуЛокальногоКешаХранилища() Экспорт

	КодВозврата = 0;
	ТекстОшибки = "";
	
	//Проверим ключевые параметры запуска
	Если Не ВсеПараметрыЗапускаЗаполненыКорректно(Истина,Истина) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Выполним команду
	Попытка
		СтрокаЗапуска = 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПутьКПлатформе1С) +
			"DESIGNER " + 
			?(ПараметрыЗапуска.ТипБазы = "S",
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортКластера + "\" + ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы),
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы))	+
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователя,"N") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователя,"P") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.КодРазрешения,"UC",,Ложь) +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресХранилища,"ConfigurationRepositoryF") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователяХранилища,"ConfigurationRepositoryN") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователяХранилища,"ConfigurationRepositoryP") +			
			"/ConfigurationRepositoryClearLocalCache " +
			"/DisableStartupMessages " +
			?(ПараметрыЗапуска.ВидныДействияВПакетномРежиме,"/Visible ","") +
			?(ЗначениеЗаполнено(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме),ВставитьПараметрЗапуска(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме,"DumpResult "),"");
		
  		ЗапуститьПриложение(СтрокаЗапуска,,Истина,КодВозврата);
 
  	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка очистки локального кэша хранилища конфигурации, КодВозврата=" + КодВозврата;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

//*****************************************************************
// Выполняет очистку локальной базы данных хранилища конфигурации
//
// Параметры:
//
// Возващает:
//	Истина - Операция успешно выполнена
//	Ложь - Были ошибки
//
Функция ВыполнитьОчисткуЛокальнойБазыДанныхХранилища() Экспорт

	КодВозврата = 0;
	ТекстОшибки = "";
	
	//Проверим ключевые параметры запуска
	Если Не ВсеПараметрыЗапускаЗаполненыКорректно(Истина,Истина) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Выполним команду
	Попытка
		СтрокаЗапуска = 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПутьКПлатформе1С) +
			"DESIGNER " + 
			?(ПараметрыЗапуска.ТипБазы = "S",
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортКластера + "\" + ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы),
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы))	+
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователя,"N") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователя,"P") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.КодРазрешения,"UC",,Ложь) +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресХранилища,"ConfigurationRepositoryF") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователяХранилища,"ConfigurationRepositoryN") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователяХранилища,"ConfigurationRepositoryP") +			
			"/ConfigurationRepositoryClearCache " +
			"/DisableStartupMessages " +
			?(ПараметрыЗапуска.ВидныДействияВПакетномРежиме,"/Visible ","") +
			?(ЗначениеЗаполнено(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме),ВставитьПараметрЗапуска(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме,"DumpResult "),"");
		
  		ЗапуститьПриложение(СтрокаЗапуска,,Истина,КодВозврата);
 
  	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка очистки локальной базы данных хранилища конфигурации, КодВозврата=" + КодВозврата;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

//*****************************************************************
// Выполняет захват объектов из хранилища конфигурации для редактирования (/ConfigurationRepositoryLock [–Objects <имя файла>] [-revised]).
//
// Параметры:
//	ПутьИмяФайлаОбъектов (-Objects <имя файла>)
//		- путь к файлу со списком объектов, которые будут участвовать в операции. Если файл указан – в операции участвуют только указанные в файле объекты, в противном случае участвует вся конфигурация.
//	ПолучатьОбъектыИзХранилища(-revised)
//		- получать захваченные объекты, если потребуется.
// Возвращает:
//		Истина	- операция выполнена успешно;
//		Ложь	- были ошибки.
//
Функция ЗахватитьВХранилище(ПутьИмяФайлаОбъектов = "", ПолучатьОбъектыИзХранилища = Истина) Экспорт
 
	КодВозврата = 0;
	ТекстОшибки = "";
	
	//Проверим ключевые параметры запуска
	Если Не ВсеПараметрыЗапускаЗаполненыКорректно(Истина, Истина) Тогда
		Возврат Ложь;
	КонецЕсли;
 	
	//Выполним команду
	Попытка
		СтрокаЗапуска = 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПутьКПлатформе1С) +
			"DESIGNER " + 
			?(ПараметрыЗапуска.ТипБазы = "S",
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортКластера + "\" + ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы),
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы))	+
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователя,"N") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователя,"P") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.КодРазрешения,"UC",,Ложь) + 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресХранилища,"ConfigurationRepositoryF") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователяХранилища,"ConfigurationRepositoryN") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователяХранилища,"ConfigurationRepositoryP") +			
			"/ConfigurationRepositoryLock " +
			?(ПутьИмяФайлаОбъектов<>"",ВставитьПараметрЗапуска(ПутьИмяФайлаОбъектов,"Objects ","-"),"") + 
			?(ПолучатьОбъектыИзХранилища,"-revised ","") +
			"/DisableStartupMessages " +
			?(ПараметрыЗапуска.ВидныДействияВПакетномРежиме,"/Visible ","") + 
			?(ЗначениеЗаполнено(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме),ВставитьПараметрЗапуска(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме,"DumpResult "),"");		
		
		ЗапуститьПриложение(СтрокаЗапуска,,Истина,КодВозврата);
		
  	Исключение
		ТекстОшибки = ОписаниеОшибки();				
		Возврат Ложь;		
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка при захвате объектов в хранилище, КодВозврата=" + КодВозврата;		
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

//*********************************************************************
// Выполняет отмену захвата объектов в хранилище конфигурации (/ConfigurationRepositoryUnLock [–Objects <имя файла>] [-force]).
//
// Параметры:
//	ПутьИмяФайлаОбъектов (-Objects <имя файла>)
//		- путь к файлу со списком объектов, которые будут участвовать в операции. Если файл указан – в операции участвуют только указанные в файле объекты, в противном случае участвует вся конфигурация.
//	ОтменитьЛокальныеИзменения(-force)
//		- описывает поведение с локально измененными объектами:
//			Ключ указан – локально измененные объекты будут получены из хранилища. Изменения будут потеряны.
//			Ключ не указан – при наличии локально измененных объектов будет выдана ошибка, и операция будет отменена целиком, для всех объектов, участвующих в операции.
// Возвращает:
//		Истина	- операция выполнена успешно;
//		Ложь	- были ошибки.
//	
Функция ОтменитьЗахватВХранилище(ПутьИмяФайлаОбъектов = "", ОтменитьЛокальныеИзменения = Истина) Экспорт

	КодВозврата = 0;
	ТекстОшибки = "";
	
	//Проверим ключевые параметры запуска
	Если Не ВсеПараметрыЗапускаЗаполненыКорректно(Истина, Истина) Тогда
		Возврат Ложь;
	КонецЕсли;
 	
	//Выполним команду
	Попытка
		СтрокаЗапуска = 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПутьКПлатформе1С) +
			"DESIGNER " + 
			?(ПараметрыЗапуска.ТипБазы = "S",
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортКластера + "\" + ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы),
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы))	+
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователя,"N") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователя,"P") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.КодРазрешения,"UC",,Ложь) + 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресХранилища,"ConfigurationRepositoryF") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователяХранилища,"ConfigurationRepositoryN") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователяХранилища,"ConfigurationRepositoryP") +			
			"/ConfigurationRepositoryUnLock " +
			?(ПутьИмяФайлаОбъектов<>"",ВставитьПараметрЗапуска(ПутьИмяФайлаОбъектов,"Objects ","-"),"") + 
			?(ОтменитьЛокальныеИзменения,"-force ","") +
			"/DisableStartupMessages " +
			?(ПараметрыЗапуска.ВидныДействияВПакетномРежиме,"/Visible ","") + 
			?(ЗначениеЗаполнено(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме),ВставитьПараметрЗапуска(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме,"DumpResult "),"");
		
		ЗапуститьПриложение(СтрокаЗапуска,,Истина,КодВозврата);
		
  	Исключение
		ТекстОшибки = ОписаниеОшибки();				
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка при попытке отменить захват объектов в хранилище, КодВозврата=" + КодВозврата;				
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

//*******************************************************************
// Помещает измененные объекты в хранилище (/ConfigurationRepositoryCommit [–Objects <имя файла>] [-comment <текст комментария>] [-keepLocked] [-force])
//		 
// Параметры:
// 	ПутьИмяФайлаОбъектов (–Objects <имя файла>)
//		– путь к файлу со списком объектов, которые будут участвовать в операции. Если файл указан – в операции участвуют только указанные в файле объекты, в противном случае участвует вся конфигурация.
//	ТекстКомментария (-comment <текст комментария>)
//		- текст комментария к помещаемым объектам.
//	ОставлятьОбъектыЗахваченными (-keepLocked)
//		- оставлять помещенные объекты захваченными. Если не указан, то после помещения изменений будет отменен захват для объектов, участвующих в операции.
//	ОчищатьСсылкиНаУдаленныеОбъекты (-force)
//		- описывает поведение при обнаружении ссылок на удаленные объекты:
//			Истина – будет выполнена попытка очистки ссылок.
//			Ложь – будет выдана ошибка.
// Возвращает:
//		Истина	- операция выполнена успешно;
//		Ложь	- были ошибки.
//
Функция ПоместитьВХранилище (ПутьИмяФайлаОбъектов = "", ТекстКомментария = "", ОставлятьОбъектыЗахваченными = Ложь, ОчищатьСсылкиНаУдаленныеОбъекты = Истина) Экспорт

	КодВозврата = 0;
	ТекстОшибки = "";
	
	//Проверим ключевые параметры запуска
	Если Не ВсеПараметрыЗапускаЗаполненыКорректно(Истина, Истина) Тогда
		Возврат Ложь;
	КонецЕсли;
 	
	//Выполним команду
	Попытка
		СтрокаЗапуска = 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПутьКПлатформе1С) +
			"DESIGNER " + 
			?(ПараметрыЗапуска.ТипБазы = "S",
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресКластера + ":" + ПараметрыЗапуска.ПортКластера + "\" + ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы),
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяБазы,ПараметрыЗапуска.ТипБазы))	+
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователя,"N") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователя,"P") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.КодРазрешения,"UC",,Ложь) + 
			ВставитьПараметрЗапуска(ПараметрыЗапуска.АдресХранилища,"ConfigurationRepositoryF") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ИмяПользователяХранилища,"ConfigurationRepositoryN") +
			ВставитьПараметрЗапуска(ПараметрыЗапуска.ПарольПользователяХранилища,"ConfigurationRepositoryP") +			
			"/ConfigurationRepositoryCommit " +			
			?(ПутьИмяФайлаОбъектов<>"",ВставитьПараметрЗапуска(ПутьИмяФайлаОбъектов,"Objects ","-"),"") + 
			ВставитьПараметрЗапуска(ТекстКомментария,"comment ","-") +			
			?(ОставлятьОбъектыЗахваченными,"-keepLocked ","") +
			?(ОчищатьСсылкиНаУдаленныеОбъекты,"-force ","") +			
			"/DisableStartupMessages " +
			?(ПараметрыЗапуска.ВидныДействияВПакетномРежиме,"/Visible ","") + 
			?(ЗначениеЗаполнено(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме),ВставитьПараметрЗапуска(ПараметрыЗапуска.ФайлДляЗаписиРезультатовРаботыВПакетномРежиме,"DumpResult "),"");
		
		ЗапуститьПриложение(СтрокаЗапуска,,Истина,КодВозврата);		
		
  	Исключение
		ТекстОшибки = ОписаниеОшибки();						
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата	
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка при попытке поместить объекты в хранилище, КодВозврата=" + КодВозврата;		
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;

КонецФункции

//*****************************************************************
// Создает файл списка объектов на основании отчета о сравнении
//
// Параметры:
//	ПолныйПутьКФайлуОтчета - полный путь к файлу отчета о сравнении (отчет должен быть кратким в формате txt) 
//	ПолныйПутьКФайлуСпискаОбъектов - полный путь к файлу списка объектов, если путь не указан, будет создан временный.
//
// Возвращает:
//		Неопределено 	- были ошибки;
//		Путь к файлу списка объектов - Файл создан успешно.
//
Функция СоздатьФайлСпискаОбъектов(ПолныйПутьКФайлуОтчета="", ПолныйПутьКФайлуСпискаОбъектов="") Экспорт
	
	//Читаем файл отчета о сравнении
	Если ПолныйПутьКФайлуОтчета = "" Тогда
		ТекстОшибки = "Не верное количество параметров. Не указан путь к файлу отчета о сравнении!";
		Возврат Неопределено;		
	КонецЕсли;
	Текст = Новый ТекстовыйДокумент; 
    Попытка
		Текст.Прочитать(ПолныйПутьКФайлуОтчета); 
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Неопределено;		
	КонецПопытки;
	мсСписокОбъектов = Новый массив;
	//создаем массив объектов из файла сравнения
	ТекущийИндексМассива = -1;
    Для НомерСтроки = 1 По Текст.КоличествоСтрок() Цикл 
		ОбъектФормаИлиМакет = Ложь;				
		Стр = Текст.ПолучитьСтроку(НомерСтроки); 		
		Если Найти(Стр, "- ***") <> 0 или Найти(Стр, "- <--") или Найти(Стр, "- -->") <> 0 Тогда
			НачальнаяПозиция = 1;		
			Пока СтрНайти(Стр, "	",,НачальнаяПозиция) <> 0 Цикл
				КоличествоТабов = НачальнаяПозиция;
				НачальнаяПозиция = НачальнаяПозиция + 1;
			КонецЦикла;
			Если КоличествоТабов = 2 Тогда				
				мсСписокОбъектов.Добавить(Сред(Стр,КоличествоТабов + 6));					
				ТекущийИндексМассива = ТекущийИндексМассива + 1;								
				УровеньПредыдущегоОбъекта = КоличествоТабов; 
			КонецЕсли;
			Если КоличествоТабов = 3 Тогда						
				ПредОбъект = мсСписокОбъектов[ТекущийИндексМассива];
				НачальнаяПозиция = КоличествоТабов + 6;
				КонечнаяПозиция = СтрНайти(Стр, ".",,Найти(Стр, ".") + 1);
				ТекОбъект = Сред(Стр,НачальнаяПозиция,КонечнаяПозиция - НачальнаяПозиция);
				Если Найти(Стр, ".Форма.")<>0 или Найти(Стр, ".Макет.")<>0 Тогда
					ОбъектФормаИлиМакет = Истина;				
				КонецЕсли; 				
				Если ПредОбъект = ТекОбъект и ОбъектФормаИлиМакет и УровеньПредыдущегоОбъекта = 2 Тогда
					мсСписокОбъектов[ТекущийИндексМассива] = Сред(Стр,КоличествоТабов + 6);					
				ИначеЕсли ОбъектФормаИлиМакет Тогда
					мсСписокОбъектов.Добавить(Сред(Стр,КоличествоТабов + 6));	
					ТекущийИндексМассива = ТекущийИндексМассива + 1;					
					УровеньОбъекта = КоличествоТабов; 					
				КонецЕсли;	
			УровеньПредыдущегоОбъекта = КоличествоТабов;				
			КонецЕсли;			
		КонецЕсли;        
    КонецЦикла;     
		
	Если Не мсСписокОбъектов.Количество()>0 Тогда
		ТекстОшибки = "Нет элементов для создания файла списка объектов.";
		Возврат Неопределено;
	КонецЕсли;
	//Создаем файл списка объектов
	Если ПолныйПутьКФайлуСпискаОбъектов = "" Тогда
		ПолныйПутьКФайлуСпискаОбъектов = ПолучитьИмяВременногоФайла(".xml");
	КонецЕсли;
	Запись = Новый ЗаписьXML;	
	Запись.ОткрытьФайл(ПолныйПутьКФайлуСпискаОбъектов, "UTF-8"); 
	Запись.ЗаписатьНачалоЭлемента("Objects"); 
	Запись.ЗаписатьАтрибут("xmlns", "http://v8.1c.ru/8.3/config/objects");
	Запись.ЗаписатьАтрибут("version", "1.0");
	Запись.ЗаписатьНачалоЭлемента("Configuration");
	Запись.ЗаписатьАтрибут("includeChildObjects", "false");
	Запись.ЗаписатьКонецЭлемента();
	// Записываем элемент для каждого объекта из массива
	Для каждого Строка Из мсСписокОбъектов Цикл
		Запись.ЗаписатьНачалоЭлемента("Object");		
		Запись.ЗаписатьАтрибут("fullName", Строка);		
		Запись.ЗаписатьАтрибут("includeChildObjects", "false");
		Запись.ЗаписатьКонецЭлемента();		
	КонецЦикла;
	Запись.ЗаписатьКонецЭлемента();
	Запись.Закрыть(); 
	Возврат ПолныйПутьКФайлуСпискаОбъектов;
	
КонецФункции


//*****************************************************************
// Сразу при создании инициируем параметры
ИнициироватьПараметры();
   
